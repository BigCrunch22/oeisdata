%I A215886 #10 Sep 07 2013 14:28:42
%S A215886 1,5,11,19,29,41,55,71,77,85,95,119,121,149,167,187,197,221,239,263,
%T A215886 273,293,315,339,365,389,411,431,453,477,503,531,561,581,611,639,665,
%U A215886 693,723,751,781,809,839,871,901,933,963
%N A215886 The most common total path length for each size of (fully leafed) binary tree, with left and right distinguished.
%D A215886 Robert P. Dobrow, James Allen Fill, Total Path Length for Random Recursive Trees, Combinatorics, Probability and Computing, Volume 8, Issue 04, July 1999, pp 317-333.
%o A215886 (Common Lisp)
%o A215886 (defparameter all '(((1 1))))            ;the first element of each pair represents a total path length, the second element represents how many trees of that size have the same path length
%o A215886 (defun combine-duplicates (list1)                  ;takes a list of pairs and merges any pairs with the same first number, by adding their second number together
%o A215886     (let*
%o A215886       ((list (sort list1 #'(lambda (a b) (< (first a) (first b)))))
%o A215886        (place list))
%o A215886       (loop
%o A215886         (when (null (cdr place)) (return))
%o A215886         (if (= (first (car place)) (first (cadr place)))
%o A215886           (progn
%o A215886             (incf (second (car place)) (second (cadr place)))
%o A215886             (setf (cdr place) (cddr place)))
%o A215886           (setf place (cdr place))))
%o A215886       list))
%o A215886 (defun combine (num a b)             ; combines 2 trees's path lengths into a larger tree, num is the number of element contained in both trees and the new root
%o A215886     (list (+ num (first a) (first b))
%o A215886           (* (second a) (second b))))            ;the numbers of possible trees are multiplied because each possible way of choosing one possibility from each, should be counted
%o A215886 (defun map-all (func list1 list2)           ;this takes a function and two lists and feeds the function one element from each, in all combinations
%o A215886      (mapcan #'(lambda (b)
%o A215886                  (mapcar #'(lambda (a) (funcall func a b)) list1))
%o A215886              list2))
%o A215886 (defun path-lengths (x)                 ;computes the list of possible total path lengths for a tree with x nodes
%o A215886     (when (<= (length all) x)           ;if we have not already computed the solution for this size, we do so
%o A215886       (let ((num (1+ (* 2 x))))             ;because we are working with fully leafed trees, we calculate the number of elements when we are given just the number of nodes
%o A215886         (nconc  all (list               ;we stick the results for this size onto the end of our list of all results
%o A215886           (combine-duplicates
%o A215886            (mapcan                        ;we try all ways of splitting x-1 indistinguishable nodes into two groups
%o A215886             #'(lambda (n) (map-all
%o A215886                                    #'(lambda (a b) (combine num a b))     ;we get all possible trees by recursing to all possible trees for each branch
%o A215886                                    (path-lengths n)                                        ;the path lengths of all possible trees with some of our nodes
%o A215886                                    (path-lengths (- x n 1))))                          ;the path lengths of all possible trees with the rest of our nodes
%o A215886             (loop for i below x collect i))))))) ; list of 0 to x-1
%o A215886         (elt all x)) ;return the solutions for this size
%o A215886 (progn (path-lengths 40) nil)             ;fills up the 'all' with results, change 40 to however many elements of this sequence you want (progn ... nil is so that it doesn't cover the screen with numbers)
%o A215886 (defun find-max (seq)                  ; finds the pair with the greatest number of trees
%o A215886     (let ((max '(0 0)))
%o A215886       (loop for i in seq do
%o A215886         (when (> (second i) (second max))
%o A215886           (setf max i)))
%o A215886       max))
%o A215886 (loop for a in all collect (first (find-max a)))                 ;gives you the path length with the greatest number of trees, for each size
%Y A215886 Cf. A028387 (maximum total path length for each size of tree).
%K A215886 nonn
%O A215886 1,2
%A A215886 _Anders Horn_, Aug 25 2012
