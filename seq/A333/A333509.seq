%I A333509 #23 Mar 26 2020 07:11:17
%S A333509 1,1,8,1,16,29,1,32,95,80,1,64,313,426,195,1,128,1033,2320,1745,444,1,
%T A333509 256,3411,12706,16347,6838,969,1,512,11265,69662,154259,112572,25897,
%U A333509 2056,1,1024,37205,381964,1454495,1859660,752245,95292,4279
%N A333509 Square array T(n,k), n >= 1, k >= 2, read by antidiagonals, where T(n,k) is the number of self-avoiding walks in the n X k grid graph which start at any of the n vertices on left side of the graph and terminate at any of the n vertices on the right side.
%e A333509 Square array T(n,k) begins:
%e A333509     1,    1,      1,       1,        1, ...
%e A333509     8,   16,     32,      64,      128, ...
%e A333509    29,   95,    313,    1033,     3411, ...
%e A333509    80,  426,   2320,   12706,    69662, ...
%e A333509   195, 1745,  16347,  154259,  1454495, ...
%e A333509   444, 6838, 112572, 1859660, 30549774, ...
%o A333509 (Python)
%o A333509 # Using graphillion
%o A333509 from graphillion import GraphSet
%o A333509 import graphillion.tutorial as tl
%o A333509 def A(start, goal, n, k):
%o A333509     universe = tl.grid(n - 1, k - 1)
%o A333509     GraphSet.set_universe(universe)
%o A333509     paths = GraphSet.paths(start, goal)
%o A333509     return paths.len()
%o A333509 def A333509(n, k):
%o A333509     if n == 1: return 1
%o A333509     s = 0
%o A333509     for i in range(1, n + 1):
%o A333509         for j in range(k * n - n + 1, k * n + 1):
%o A333509             s += A(i, j, k, n)
%o A333509     return s
%o A333509 print([A333509(j + 1, i - j + 2) for i in range(9) for j in range(i + 1)])
%Y A333509 Columns k=2-3 give: A333510, A333511.
%Y A333509 Rows n=1-3 give: A000012, A000079(n+1), 2*A082574(n+1)+1.
%Y A333509 T(n,n) gives A121785(n-1).
%K A333509 nonn,tabl
%O A333509 1,3
%A A333509 _Seiichi Manyama_, Mar 25 2020
