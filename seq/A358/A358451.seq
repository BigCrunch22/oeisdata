%I A358451 #9 Jun 15 2024 05:55:57
%S A358451 1,0,1,1,2,5,11,28,68,174,445,1166,3068,8190,21994,59585,162360,
%T A358451 445145,1226376,3394654,9434260,26317865,73661588,206809307,582255448,
%U A358451 1643536725,4650250254,13186484316,37468566744,106666821221,304200399505,868977304140,2486163857424
%N A358451 Inverse Euler transform of the Riordan numbers, (A005043).
%H A358451 OEIS Wiki, <a href="https://oeis.org/wiki/Euler_transform">Euler transform</a>
%F A358451 a(n) ~ 3^(n + 1/2) / (4*sqrt(Pi)*n^(3/2)). - _Vaclav Kotesovec_, Jun 15 2024
%p A358451 EulerInvTransform := proc(f) local c, b;
%p A358451     c := proc(n) option remember;
%p A358451     ifelse(n = 0, f(0), f(n) - b(n, n-1)) end:
%p A358451     b := proc(n, k) option remember;
%p A358451     if n = 0 then return 1 elif k < 1 then return 0 fi;
%p A358451     add(binomial(c(k) + j - 1, j)*b(n-k*j, k-1), j=0..n/k) end:
%p A358451 c end:
%p A358451 a := EulerInvTransform(A005043): seq(a(n), n = 0..32);
%t A358451 EulerInvTransform[seq_List] := Module[{final = {}}, Do[AppendTo[final, i*seq[[i]] - Sum[final[[d]]*seq[[i-d]], {d, i-1}]], {i, Length[seq]}]; Table[Sum[MoebiusMu[i/d]*final[[d]], {d, Divisors[i]}]/i, {i, Length[seq] }]];
%t A358451 A005043[n_] := A005043[n] = If[n <= 1, 1-n, (n-1)*(2*A005043[n-1] + 3*A005043[n-2])/(n+1)];
%t A358451 Join[{1}, EulerInvTransform[Array[A005043, 32]]] (* _Jean-FranÃ§ois Alcover_, Jun 15 2024 *)
%o A358451 (SageMath)
%o A358451 z = PowerSeriesRing(ZZ, 'z').gen().O(33)
%o A358451 g = 1 + z + sqrt(1 - 2*z - 3*z**2)
%o A358451 f = -z * g.derivative() / g
%o A358451 print([1] + [sum(moebius(n // d) * f[d]
%o A358451       for d in divisors(n)) // n for n in range(1, 33)])
%o A358451 (Python)
%o A358451 from typing import Callable
%o A358451 from functools import cache
%o A358451 from math import comb
%o A358451 # Define 'binomial' for compatibility with Maple.
%o A358451 def binomial(n: int, k: int) -> int:
%o A358451     if 0 <= k <= n: return comb(n, k)
%o A358451     if k <= n <  0: return comb(-k-1, n-k)*(-1)**(n-k)
%o A358451     if n <  0 <= k: return comb(-n+k-1, k)*(-1)**k
%o A358451     return 0
%o A358451 def EulerInvTransform(f: Callable) -> Callable:
%o A358451     @cache
%o A358451     def h(n: int, k: int) -> int:
%o A358451         if n == 0: return 1
%o A358451         if k <  1: return 0
%o A358451         return sum(binomial(b(k)+j-1, j) * h(n-k*j, k-1)
%o A358451                for j in range(1 + n // k))
%o A358451     @cache
%o A358451     def b(n: int) -> int:
%o A358451         if n == 0: return f(0)
%o A358451         return f(n) - h(n, n - 1)
%o A358451     return b
%o A358451 a = EulerInvTransform(A005043)
%o A358451 print([a(n) for n in range(33)])
%Y A358451 Cf. A005043.
%K A358451 nonn,changed
%O A358451 0,5
%A A358451 _Peter Luschny_, Nov 20 2022
