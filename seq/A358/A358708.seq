%I A358708 #82 Feb 14 2023 12:55:46
%S A358708 1,2,4,8,16,13,23,26,46,43,83,86,166,133,136,68,34,17,27,47,87,167,
%T A358708 137,174,172,171,271,272,236,118,19,29,49,89,169,139,178,278,239,269,
%U A358708 469,439,478,474,237,267,467,437,837,867,1667,1337,1367,687,347,177,277,477,877,1677,1377,1747,1727,1717,1734,1732,866,433,233,263,163,323,313,316,38,76,73,143,123,63,33,36,18,9
%N A358708 Starting from 1, successively take the smallest "Choix de Bruxelles" (A323286) which is not already in the sequence.
%C A358708 The Choix de Bruxelles doubles or halves some decimal digit substring and rows of A323286 are all ways this can be done.
%C A358708 So a(n) is the smallest term of the row a(n-1) of A323286 which is not among {a(0..n-1)}.
%C A358708 The sequence is finite since having reached 18 -> 9 the sole Choix for 9 would be back to 18, which is already in the sequence.
%H A358708 Eric Angelini, Lars Blomberg, Charlie Neder, Remy Sigrist, and N. J. A. Sloane, <a href="http://arxiv.org/abs/1902.01444">"Choix de Bruxelles": A New Operation on Positive Integers</a>, arXiv:1902.01444 [math.NT], Feb 2019; Fib. Quart. 57:3 (2019), 195-200.
%e A358708 Below, square brackets [] represent multiplication by 2 (e.g., [6] = 12); curly brackets {} represent division by 2 (e.g., {6} = 3); digits outside the brackets are not affected by the multiplication or division (e.g., 1[6] = 112 and 1{14} = 17).
%e A358708 We begin with 1 and, at each step, we go to the smallest number possible that hasn't yet appeared in the sequence:
%e A358708  1 --> [1]  =  2
%e A358708  2 --> [2]  =  4
%e A358708  4 --> [4]  =  8
%e A358708  8 --> [8]  = 16
%e A358708  16 --> 1{6} = 13
%e A358708  13 --> [1]3 = 23
%e A358708  23 --> 2[3] = 26
%e A358708  26 --> [2]6 = 46
%e A358708  ... and so on.
%o A358708 (C#)
%o A358708 using System;
%o A358708 using System.Collections.Generic;
%o A358708 using System.Linq;
%o A358708 public class Program
%o A358708 {
%o A358708     static List<long> Numbers = new List<long>();
%o A358708     static void Main()
%o A358708     {
%o A358708         Numbers.Add(1);
%o A358708         int num0 = 0 ;
%o A358708         Console.WriteLine(1);
%o A358708         while (Permutation(Numbers[num0])!=0)
%o A358708         {
%o A358708             if (Permutation(Numbers[num0])!=0)
%o A358708             {
%o A358708             Numbers.Add(Permutation(Numbers[num0]));
%o A358708             Console.WriteLine(Numbers[Numbers.Count-1]);
%o A358708             }
%o A358708             num0++;
%o A358708         }
%o A358708         }
%o A358708         static long Permutation(long num0)
%o A358708         {
%o A358708             List<long> Next_Term = new List<long>();
%o A358708             string Term = Convert.ToString(num0);
%o A358708             int Y = 0;
%o A358708             while (Term.Length>=Y)
%o A358708             {
%o A358708                 int X = Y;
%o A358708                 string P_Term = "";
%o A358708                 string Digits_Before = "";
%o A358708                 string Digits_After = "";
%o A358708                 for (int i = 0; i < X; i++)
%o A358708                 {
%o A358708                     Digits_Before = Digits_Before + Term[i];
%o A358708                 }
%o A358708                 while(X!=Term.Length)
%o A358708                 {
%o A358708                     Digits_After = "";
%o A358708                     for (int i = X+1; i < Term.Length; i++)
%o A358708                     {
%o A358708                         Digits_After = Digits_After + Term[i];
%o A358708                     }
%o A358708                     P_Term = P_Term + Term[X];
%o A358708                     if(P_Term == Convert.ToString(Convert.ToInt64(P_Term))){
%o A358708                     if (Convert.ToInt64(P_Term)%2==0&Numbers.Contains(Convert.ToInt64( Digits_Before + Convert.ToString(Convert.ToInt64(P_Term)/2) + Digits_After))==false)
%o A358708                     {
%o A358708                         Next_Term.Add(Convert.ToInt64( Digits_Before + Convert.ToString(Convert.ToInt64(P_Term)/2) + Digits_After));
%o A358708                     }else{
%o A358708                     if (Numbers.Contains(Convert.ToInt64( Digits_Before + Convert.ToString(Convert.ToInt64(P_Term)*2) + Digits_After))==false)
%o A358708                     {
%o A358708                         Next_Term.Add(Convert.ToInt64( Digits_Before + Convert.ToString(Convert.ToInt64(P_Term)*2) + Digits_After));
%o A358708                     } ;
%o A358708                 }
%o A358708                     }
%o A358708                     X++;
%o A358708                 }
%o A358708                 while (Convert.ToInt64(Term[0])==Convert.ToInt64("0"))
%o A358708                 {
%o A358708                     Y++;
%o A358708                 }
%o A358708                 Y++;
%o A358708             }
%o A358708             if (Next_Term.Count!=0)
%o A358708             {
%o A358708             return Next_Term.Min();
%o A358708             }else
%o A358708             {
%o A358708                 return 0;
%o A358708             }
%o A358708 }
%o A358708 }
%Y A358708 Cf. A323460, A307635, A323286, A323454.
%K A358708 nonn,easy,base,fini,full
%O A358708 0,2
%A A358708 _Alon Vinkler_, Nov 26 2022
