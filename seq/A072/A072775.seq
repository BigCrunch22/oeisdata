%I A072775 #12 Aug 19 2024 02:20:49
%S A072775 1,2,3,2,5,6,7,2,3,10,11,13,14,15,2,17,19,21,22,23,5,26,3,29,30,31,2,
%T A072775 33,34,35,6,37,38,39,41,42,43,46,47,7,51,53,55,57,58,59,61,62,2,65,66,
%U A072775 67,69,70,71,73,74,77,78,79,3,82,83,85,86,87,89,91,93,94,95,97,10,101
%N A072775 Squarefree kernels of powers of squarefree numbers.
%C A072775 a(n) = A007947(A072774(n));
%C A072775 A072774(n) = a(n)^A072776(n);
%C A072775 A072774(n) is squarefree iff A072774(n)=a(n).
%H A072775 Reinhard Zumkeller, <a href="/A072775/b072775.txt">Table of n, a(n) for n = 1..10000</a>
%o A072775 (Haskell)
%o A072775 a072775 n = a072775_list !! (n-1)  -- a072775_list defined in A072774.
%o A072775 -- _Reinhard Zumkeller_, Apr 06 2014
%o A072775 (Python)
%o A072775 from math import isqrt, prod
%o A072775 from sympy import mobius, integer_nthroot, primefactors
%o A072775 def A072775(n):
%o A072775     def g(x): return int(sum(mobius(k)*(x//k**2) for k in range(1, isqrt(x)+1)))-1
%o A072775     def f(x): return n-2+x-sum(g(integer_nthroot(x,k)[0]) for k in range(1,x.bit_length()))
%o A072775     kmin, kmax = 1,2
%o A072775     while f(kmax) >= kmax:
%o A072775         kmax <<= 1
%o A072775     while True:
%o A072775         kmid = kmax+kmin>>1
%o A072775         if f(kmid) < kmid:
%o A072775             kmax = kmid
%o A072775         else:
%o A072775             kmin = kmid
%o A072775         if kmax-kmin <= 1:
%o A072775             break
%o A072775     return prod(primefactors(kmax)) # _Chai Wah Wu_, Aug 19 2024
%Y A072775 Cf. A052410.
%K A072775 nonn
%O A072775 1,2
%A A072775 _Reinhard Zumkeller_, Jul 10 2002
