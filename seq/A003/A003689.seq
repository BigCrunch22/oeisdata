%I A003689 #35 Sep 08 2022 08:44:32
%S A003689 3,30,144,588,2160,7440,24576,78912,248448,771456,2371968,7241856,
%T A003689 21998976,66586752,201025920,605781120,1823094144,5481472128,
%U A003689 16470172032,49464779904,148508372352,445764192384,1337792747904
%N A003689 Number of Hamiltonian paths in K_3 X P_n.
%D A003689 F. Faase, On the number of specific spanning subgraphs of the graphs G X P_n, Ars Combin. 49 (1998), 129-154.
%H A003689 Vincenzo Librandi, <a href="/A003689/b003689.txt">Table of n, a(n) for n = 1..1000</a>
%H A003689 F. Faase, <a href="http://www.iwriteiam.nl/Cpaper.zip">On the number of specific spanning subgraphs of the graphs G X P_n</a>, Preliminary version of paper that appeared in Ars Combin. 49 (1998), 129-154.
%H A003689 F. Faase, <a href="http://www.iwriteiam.nl/counting.html">Counting Hamiltonian cycles in product graphs</a>
%H A003689 F. Faase, <a href="http://www.iwriteiam.nl/Cresults.html">Results from the counting program</a>
%H A003689 <a href="/index/Rec#order_03">Index entries for linear recurrences with constant coefficients</a>, signature (7,-16,12).
%F A003689 a(n) = 7*a(n-1) - 16*a(n-2) + 12*a(n-3), n>5.
%F A003689 a(n) = 128 * 3^(n-2) - (21*n + 57) * 2^(n-2), n>2. - _Ralf Stephan_, Sep 26 2004
%F A003689 G.f.: 3*x*(1+3*x-6*x^2+8*x^3-4*x^4) / ((1-3*x)*(1-2*x)^2). [_R. J. Mathar_, Dec 16 2008]
%t A003689 Join[{3,30},LinearRecurrence[{7,-16,12},{144,588,2160},30]] (* _Harvey P. Dale_, Apr 26 2014 *)
%t A003689 CoefficientList[Series[3 (1 + 3 x - 6 x^2 + 8 x^3 - 4 x^4)/((1 - 3 x) (1 - 2 x)^2), {x, 0, 30}], x] (* _Vincenzo Librandi_, Apr 27 2014 *)
%o A003689 (Magma) [3,30] cat [128*3^(n-2)-(21*n+57)*2^(n-2): n in [3..30]];  // _Vincenzo Librandi_, Apr 27 2014
%o A003689 (Python)
%o A003689 # Using graphillion
%o A003689 from graphillion import GraphSet
%o A003689 def make_CnXPk(n, k):
%o A003689     grids = []
%o A003689     for i in range(1, k + 1):
%o A003689         for j in range(1, n):
%o A003689             grids.append((i + (j - 1) * k, i + j * k))
%o A003689         grids.append((i + (n - 1) * k, i))
%o A003689     for i in range(1, k * n, k):
%o A003689         for j in range(1, k):
%o A003689             grids.append((i + j - 1, i + j))
%o A003689     return grids
%o A003689 def A(start, goal, n, k):
%o A003689     universe = make_CnXPk(n, k)
%o A003689     GraphSet.set_universe(universe)
%o A003689     paths = GraphSet.paths(start, goal, is_hamilton=True)
%o A003689     return paths.len()
%o A003689 def B(n, k):
%o A003689     m = k * n
%o A003689     s = 0
%o A003689     for i in range(1, m):
%o A003689         for j in range(i + 1, m + 1):
%o A003689             s += A(i, j, n, k)
%o A003689     return s
%o A003689 def A003689(n):
%o A003689     return B(3, n)
%o A003689 print([A003689(n) for n in range(1, 21)])  # _Seiichi Manyama_, Dec 18 2020
%Y A003689 Cf. A003732, A003752, A268894.
%K A003689 nonn,easy
%O A003689 1,1
%A A003689 _Frans J. Faase_
