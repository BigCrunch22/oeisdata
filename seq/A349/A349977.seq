%I A349977 #4 Dec 07 2021 18:16:31
%S A349977 0,1,1,1,3,4,8,13,23,38,68,114,201,343,600,1037,1817,3157,5543,9692,
%T A349977 17047,29952,52828,93157,164743,291459,516679,916626,1628684,2896261,
%U A349977 5156925,9189769,16393652,29268223,52300907,93529331,167390342,299787639,537281476
%N A349977 Inverse Euler transform of the classical tribonacci numbers.
%C A349977 The classical tribonacci numbers are defined a(n) = a(n-1) + a(n-2) + a(n-3) for n >= 3 with a(0) = 0 and a(1) = a(2) = 1.
%C A349977 See A349904 for the analogous sequence for the shifted tribonacci numbers A000073.
%t A349977 (* EulerInvTransform is defined in A022562. *)
%t A349977 EulerInvTransform[LinearRecurrence[{1, 1, 1}, {0, 1, 1}, 40]]
%o A349977 (Python) # After the Maple program of _Alois P. Heinz_ in A349904.
%o A349977 from functools import cache
%o A349977 from math import comb
%o A349977 def euler_inv_trans(a: callable, len: int):
%o A349977     @cache
%o A349977     def h(n: int, k: int):
%o A349977         if n == 0: return 1
%o A349977         if k <  1: return 0
%o A349977         bk = b(k)
%o A349977         R = range(int(bk == 0), 1 + n // k)
%o A349977         return sum(comb(bk + j - 1, j) * h(n - k * j, k - 1) for j in R)
%o A349977     @cache
%o A349977     def b(n: int): return a(n - 1) - h(n, n - 1)
%o A349977     return [b(n) for n in range(1, len)]
%o A349977 @cache
%o A349977 def tribonacci(n: int):
%o A349977     return sum(tribonacci(n - j - 1) for j in range(3)) if n >= 3 else min(n, 1)
%o A349977 print(euler_inv_trans(tribonacci, 40))
%Y A349977 Cf. A349904, A000073.
%K A349977 nonn
%O A349977 1,5
%A A349977 _Peter Luschny_, Dec 07 2021
