%I A324687 #5 Mar 11 2019 20:46:20
%S A324687 0,0,0,0,1,2,0,331,0,1,0,5,17,18,0,0,24,146798,0,1,33885,0,2,0,1,
%T A324687 175429,0,1,0,102,2658893,137573,137573,137574,137575,0,0,18,49239,
%U A324687 49239,45,0,0,1,169,0,17,11,12,7,8,40,3,0,1,0,149,149,149,92857,92857
%N A324687 Starting at n, a(n) is the number of times we move away from zero from a positive position according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away.
%e A324687 For n=11, the points visited are 11, 10, 8, 5, 1, -4, 2, -5, 3, -6, 4, -7, -19, -32, -18, -3, 13, 30, 12, 31, 51, 72, 50, 27, 51, 26, 0.  Of these, we move away from zero at -7, -19, 13, 12, 31, 51, and 27. Five of these are positive and thus a(11)=5.
%o A324687 (Python)
%o A324687 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324687 #spots - positions in order with possible repetition
%o A324687 #flee - positions from which we move away from zero with possible repetition
%o A324687 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324687 def trip(n):
%o A324687     stucklist = list()
%o A324687     spotsvisited = [n]
%o A324687     leavingspots = list()
%o A324687     turn = 0
%o A324687     forbidden = {n}
%o A324687     while n != 0:
%o A324687         turn += 1
%o A324687         sign = n // abs(n)
%o A324687         st = sign * turn
%o A324687         if n - st not in forbidden:
%o A324687             n = n - st
%o A324687         else:
%o A324687             leavingspots.append(n)
%o A324687             if n + st in forbidden:
%o A324687                 stucklist.append(n)
%o A324687             n = n + st
%o A324687         spotsvisited.append(n)
%o A324687         forbidden.add(n)
%o A324687     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324687                 'turns':turn, 'flee':leavingspots}
%o A324687 def sgn(x):
%o A324687     if x:
%o A324687         return x//abs(x)
%o A324687     return 0
%o A324687 #Actual sequence
%o A324687 def a(n):
%o A324687     d = trip(n)
%o A324687     return sum(1 for i in d['flee'] if i > 0)
%Y A324687 Cf. A228474, A324660-A324692.
%K A324687 nonn
%O A324687 0,6
%A A324687 _David Nacin_, Mar 10 2019
