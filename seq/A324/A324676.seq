%I A324676 #5 Mar 11 2019 20:45:16
%S A324676 0,0,0,0,0,0,0,-50,0,0,0,0,-15,-14,0,0,0,-145,0,0,-6,0,0,0,0,-34,0,0,
%T A324676 0,-62,-2,-1,-59,-58,-57,0,0,-5,-1,-3,-2,-1,0,0,-26,0,-21,-23,-22,-21,
%U A324676 -20,-19,-18,0,0,0,-44,-43,-42,-1,-40,-39,-38,-37,-56,0,0
%N A324676 Starting at n, a(n) is the maximal negative position from which a spot must be revisited on the next move, or zero if no such positions exist, according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away.
%e A324676 For n=41, the points visited are 41, 40, 38, 35, 31, 26, 20, 13, 5, -4, 6, -5, 7, -6, 8, -7, 9, -8, 10, -9, 11, -10, 12, -11, -35, -60, -34, -61, -33, -62, -32, -1, -33, 0.  The only position from which we are forced to revisit a spot is -1 which forces a return to -33.  As this is the only position and it is negative, it is the maximum negative position and thus a(41)=-1.
%o A324676 (Python)
%o A324676 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324676 #spots - positions in order with possible repetition
%o A324676 #flee - positions from which we move away from zero with possible repetition
%o A324676 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324676 def trip(n):
%o A324676     stucklist = list()
%o A324676     spotsvisited = [n]
%o A324676     leavingspots = list()
%o A324676     turn = 0
%o A324676     forbidden = {n}
%o A324676     while n != 0:
%o A324676         turn += 1
%o A324676         sign = n // abs(n)
%o A324676         st = sign * turn
%o A324676         if n - st not in forbidden:
%o A324676             n = n - st
%o A324676         else:
%o A324676             leavingspots.append(n)
%o A324676             if n + st in forbidden:
%o A324676                 stucklist.append(n)
%o A324676             n = n + st
%o A324676         spotsvisited.append(n)
%o A324676         forbidden.add(n)
%o A324676     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324676                 'turns':turn, 'flee':leavingspots}
%o A324676 def maxorzero(x):
%o A324676     if x:
%o A324676         return max(x)
%o A324676     return 0
%o A324676 #Actual sequence
%o A324676 def a(n):
%o A324676     d=trip(n)
%o A324676     return maxorzero([i for i in d['stuck'] if i<0])
%Y A324676 Cf. A228474, A324660-A324692.
%K A324676 sign
%O A324676 0,8
%A A324676 _David Nacin_, Mar 10 2019
