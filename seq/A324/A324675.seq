%I A324675 #5 Mar 11 2019 20:45:09
%S A324675 0,0,0,0,0,0,0,15,0,0,0,27,28,29,0,0,26,12,0,0,4,0,0,0,0,45,0,0,0,34,
%T A324675 11,12,13,1,1,0,0,0,39,40,104,0,0,1,2,0,78,79,80,0,0,114,0,0,0,0,25,
%U A324675 26,27,25,26,1,1,1,33,0,0,33,34,25,36,37,38,39,1,0
%N A324675 Starting at n, a(n) is the smallest positive position from which a spot must be revisited on the next move, or zero if no such positions exist, according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away.
%e A324675 For n=11, the points visited are 11, 10, 8, 5, 1, -4, 2, -5, 3, -6, 4, -7, -19, -32, -18, -3, 13, 30, 12, 31, 51, 72, 50, 27, 51, 26, 0.  The only position from which we are forced to revisit a spot is 27, which forces a return to 51. Since this is the only position for which this happens, and it is positive, it is also the smallest positive position, thus a(11)=27.
%o A324675 (Python)
%o A324675 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324675 #spots - positions in order with possible repetition
%o A324675 #flee - positions from which we move away from zero with possible repetition
%o A324675 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324675 def trip(n):
%o A324675     stucklist = list()
%o A324675     spotsvisited = [n]
%o A324675     leavingspots = list()
%o A324675     turn = 0
%o A324675     forbidden = {n}
%o A324675     while n != 0:
%o A324675         turn += 1
%o A324675         sign = n // abs(n)
%o A324675         st = sign * turn
%o A324675         if n - st not in forbidden:
%o A324675             n = n - st
%o A324675         else:
%o A324675             leavingspots.append(n)
%o A324675             if n + st in forbidden:
%o A324675                 stucklist.append(n)
%o A324675             n = n + st
%o A324675         spotsvisited.append(n)
%o A324675         forbidden.add(n)
%o A324675     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324675                 'turns':turn, 'flee':leavingspots}
%o A324675 def minorzero(x):
%o A324675     if x:
%o A324675         return min(x)
%o A324675     return 0
%o A324675 #Actual sequence
%o A324675 def a(n):
%o A324675     d=trip(n)
%o A324675     return minorzero([i for i in d['stuck'] if i>0])
%Y A324675 Cf. A228474, A324660-A324692.
%K A324675 nonn
%O A324675 0,8
%A A324675 _David Nacin_, Mar 10 2019
