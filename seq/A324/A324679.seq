%I A324679 #5 Mar 11 2019 20:45:37
%S A324679 0,0,0,0,0,0,0,3442,0,0,0,27,28,29,0,0,84,2368556,0,0,638385,0,0,0,0,
%T A324679 3642394,0,0,0,464,43807680,2117461,2117462,2117463,2117464,0,0,0,
%U A324679 562491,562492,179,0,0,1,1007,0,104,79,80,0,0,190,0,0,0,0,1107,1108
%N A324679 Starting at n, a(n) is the maximum positive position from which a spot must be revisited on the next move, or zero if no such positions exist, according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away.
%e A324679 For n=11, the points visited are 11, 10, 8, 5, 1, -4, 2, -5, 3, -6, 4, -7, -19, -32, -18, -3, 13, 30, 12, 31, 51, 72, 50, 27, 51, 26, 0.  The only position from which we are forced to revisit a spot is 27, which forces a return to 51. Since this is the only time this happens it is also the maximal positive point for which this happens, thus a(11)=27.
%o A324679 (Python)
%o A324679 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324679 #spots - positions in order with possible repetition
%o A324679 #flee - positions from which we move away from zero with possible repetition
%o A324679 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324679 def trip(n):
%o A324679     stucklist = list()
%o A324679     spotsvisited = [n]
%o A324679     leavingspots = list()
%o A324679     turn = 0
%o A324679     forbidden = {n}
%o A324679     while n != 0:
%o A324679         turn += 1
%o A324679         sign = n // abs(n)
%o A324679         st = sign * turn
%o A324679         if n - st not in forbidden:
%o A324679             n = n - st
%o A324679         else:
%o A324679             leavingspots.append(n)
%o A324679             if n + st in forbidden:
%o A324679                 stucklist.append(n)
%o A324679             n = n + st
%o A324679         spotsvisited.append(n)
%o A324679         forbidden.add(n)
%o A324679     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324679                 'turns':turn, 'flee':leavingspots}
%o A324679 def maxorzero(x):
%o A324679     if x:
%o A324679         return max(x)
%o A324679     return 0
%o A324679 #Actual sequence
%o A324679 def a(n):
%o A324679     d=trip(n)
%o A324679     return maxorzero([i for i in d['stuck'] if i >0 ])
%Y A324679 Cf. A228474, A324660-A324692.
%K A324679 nonn
%O A324679 0,8
%A A324679 _David Nacin_, Mar 10 2019
