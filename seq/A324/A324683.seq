%I A324683 #5 Mar 11 2019 20:45:54
%S A324683 0,0,0,0,0,0,0,52,0,0,0,0,6,6,0,0,0,33300,0,0,4302,0,0,0,0,58682,0,0,
%T A324683 0,6,154594,18830,18829,18829,18829,0,0,2,10283,10282,3,1,0,0,29,0,5,
%U A324683 3,3,3,3,5,2,0,0,0,9,9,9,21706,21705,21705,21705,21705,1,0
%N A324683 Starting at n, a(n) is the number of times we move from a negative position to a spot we have already visited according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away.
%e A324683 For n=41, the points visited are 41, 40, 38, 35, 31, 26, 20, 13, 5, -4, 6, -5, 7, -6, 8, -7, 9, -8, 10, -9, 11, -10, 12, -11, -35, -60, -34, -61, -33, -62, -32, -1, -33, 0.  The only time we revisit a spot is when we move from -1 to -33.  As this only occurs for one negative number, a(41)=1.
%o A324683 (Python)
%o A324683 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324683 #spots - positions in order with possible repetition
%o A324683 #flee - positions from which we move away from zero with possible repetition
%o A324683 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324683 def trip(n):
%o A324683     stucklist = list()
%o A324683     spotsvisited = [n]
%o A324683     leavingspots = list()
%o A324683     turn = 0
%o A324683     forbidden = {n}
%o A324683     while n != 0:
%o A324683         turn += 1
%o A324683         sign = n // abs(n)
%o A324683         st = sign * turn
%o A324683         if n - st not in forbidden:
%o A324683             n = n - st
%o A324683         else:
%o A324683             leavingspots.append(n)
%o A324683             if n + st in forbidden:
%o A324683                 stucklist.append(n)
%o A324683             n = n + st
%o A324683         spotsvisited.append(n)
%o A324683         forbidden.add(n)
%o A324683     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324683                 'turns':turn, 'flee':leavingspots}
%o A324683 #Actual sequence
%o A324683 def a(n):
%o A324683     d = trip(n)
%o A324683     return sum(1 for i in d['stuck'] if i < 0)
%Y A324683 Cf. A228474, A324660-A324692.
%K A324683 nonn
%O A324683 0,8
%A A324683 _David Nacin_, Mar 10 2019
