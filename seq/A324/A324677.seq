%I A324677 #8 Mar 11 2019 20:45:23
%S A324677 0,0,0,0,0,0,0,15,0,0,0,27,15,14,0,0,26,12,0,0,4,0,0,0,0,34,0,0,0,34,
%T A324677 2,1,13,1,1,0,0,5,1,3,2,1,0,1,2,0,21,23,22,21,20,19,18,0,0,0,25,26,27,
%U A324677 1,26,1,1,1,33,0,0,4,3,2,1,1,1,39,1,0,0,0,0
%N A324677 Starting at n, a(n) is the smallest distance from zero among all positions from which a spot must be revisited on the next move, or zero if no such positions exist, according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away.
%H A324677 David Nacin, <a href="/A324677/a324677.png">A324677</a>
%H A324677 David Nacin, <a href="/A324677/a324677_1.png">A324677(n)/sqrt(n)</a>
%e A324677 For n=11, the points visited are 11, 10, 8, 5, 1, -4, 2, -5, 3, -6, 4, -7, -19, -32, -18, -3, 13, 30, 12, 31, 51, 72, 50, 27, 51, 26, 0.  The only position from which we are forced to revisit a spot is 27, which forces a return to 51. Since this is the only position for which this happens, it is the closest position to zero where this happens and thus a(11)=27.
%o A324677 (Python)
%o A324677 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324677 #spots - positions in order with possible repetition
%o A324677 #flee - positions from which we move away from zero with possible repetition
%o A324677 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324677 def trip(n):
%o A324677     stucklist = list()
%o A324677     spotsvisited = [n]
%o A324677     leavingspots = list()
%o A324677     turn = 0
%o A324677     forbidden = {n}
%o A324677     while n != 0:
%o A324677         turn += 1
%o A324677         sign = n // abs(n)
%o A324677         st = sign * turn
%o A324677         if n - st not in forbidden:
%o A324677             n = n - st
%o A324677         else:
%o A324677             leavingspots.append(n)
%o A324677             if n + st in forbidden:
%o A324677                 stucklist.append(n)
%o A324677             n = n + st
%o A324677         spotsvisited.append(n)
%o A324677         forbidden.add(n)
%o A324677     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324677                 'turns':turn, 'flee':leavingspots}
%o A324677 def minorzero(x):
%o A324677     if x:
%o A324677         return min(x)
%o A324677     return 0
%o A324677 #Actual sequence
%o A324677 def a(n):
%o A324677     d=trip(n)
%o A324677     return minorzero([abs(i) for i in d['stuck']])
%Y A324677 Cf. A228474, A324660-A324692.
%K A324677 nonn
%O A324677 0,8
%A A324677 _David Nacin_, Mar 10 2019
