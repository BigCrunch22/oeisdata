%I A324664 #8 Mar 11 2019 20:43:31
%S A324664 0,0,1,0,3,1,0,5,4,1,0,7,6,1,4,0,7,8,7,1,2,0,5,4,1,2,7,1,0,13,2,1,10,
%T A324664 1,1,7,0,5,1,3,2,1,10,1,2,0,17,16,1,14,1,2,11,10,1,0,1,1,17,1,15,1,1,
%U A324664 1,11,10,0,4,1,2,1,1,1,15,1,13,1,1,0,2,1,1
%N A324664 Starting at n, a(n) is the smallest distance from zero for which the next move is a step away from zero, or zero if no such move is ever made, according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away from zero instead.
%H A324664 David Nacin, <a href="/A324664/a324664.png">A324664(n)/sqrt(n)</a>
%e A324664 For n=2, the points visited are 2,1,-1,-4,0 with all moves being towards zero from the current position except for the move from -1 to -4.  Thus the closest distance to zero from which a move is made away from zero is a(2) = 1.
%o A324664 (Python)
%o A324664 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324664 #spots - positions in order with possible repetition
%o A324664 #flee - positions from which we move away from zero with possible repetition
%o A324664 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324664 def trip(n):
%o A324664     stucklist = list()
%o A324664     spotsvisited = [n]
%o A324664     leavingspots = list()
%o A324664     turn = 0
%o A324664     forbidden = {n}
%o A324664     while n != 0:
%o A324664         turn += 1
%o A324664         sign = n // abs(n)
%o A324664         st = sign * turn
%o A324664         if n - st not in forbidden:
%o A324664             n = n - st
%o A324664         else:
%o A324664             leavingspots.append(n)
%o A324664             if n + st in forbidden:
%o A324664                 stucklist.append(n)
%o A324664             n = n + st
%o A324664         spotsvisited.append(n)
%o A324664         forbidden.add(n)
%o A324664     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324664                 'turns':turn, 'flee':leavingspots}
%o A324664 def minorzero(x):
%o A324664     if x:
%o A324664         return min(x)
%o A324664     return 0
%o A324664 #Actual sequence
%o A324664 def a(n):
%o A324664     d = trip(n)
%o A324664     return minorzero([abs(i) for i in d['flee']])
%Y A324664 Cf. A228474, A324660-A324692
%K A324664 nonn
%O A324664 0,5
%A A324664 _David Nacin_, Mar 10 2019
