%I A324681 #9 Mar 12 2019 09:19:58
%S A324681 0,1,0,1,1,0,1,0,0,0,1,1,1,0,-1,1,1,0,0,1,0,1,0,1,1,0,-1,0,1,1,0,-1,0,
%T A324681 1,0,-1,1,1,0,-1,-1,-1,-1,1,0,1,0,0,0,-1,1,0,-1,-1,0,1,0,-1,1,0,1,1,1,
%U A324681 0,-1,-1,1,1,1,0,-1,-1,-1,-1,0,-1,1,0,1,0
%N A324681 Starting at n, a(n) is the sign of the closest nonzero position to zero visited according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away. In the cases of a tie or n=0, we set a(n)=0.
%e A324681 For n=14, the points visited are 14, 13, 11, 8, 4, -1, 5, -2, 6, -3, 7, -4, -16, -29, -15, 0. The closest of these to zero is -1, which is negative, thus a(14) = sgn(-1) = -1.
%o A324681 (Python)
%o A324681 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324681 #spots - positions in order with possible repetition
%o A324681 #flee - positions from which we move away from zero with possible repetition
%o A324681 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324681 def trip(n):
%o A324681     stucklist = list()
%o A324681     spotsvisited = [n]
%o A324681     leavingspots = list()
%o A324681     turn = 0
%o A324681     forbidden = {n}
%o A324681     while n != 0:
%o A324681         turn += 1
%o A324681         sign = n // abs(n)
%o A324681         st = sign * turn
%o A324681         if n - st not in forbidden:
%o A324681             n = n - st
%o A324681         else:
%o A324681             leavingspots.append(n)
%o A324681             if n + st in forbidden:
%o A324681                 stucklist.append(n)
%o A324681             n = n + st
%o A324681         spotsvisited.append(n)
%o A324681         forbidden.add(n)
%o A324681     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324681                 'turns':turn, 'flee':leavingspots}
%o A324681 def sgn(x):
%o A324681     if x:
%o A324681         return x//abs(x)
%o A324681     return 0
%o A324681 def maxorzero(x):
%o A324681     if x:
%o A324681         return max(x)
%o A324681     return 0
%o A324681 def minorzero(x):
%o A324681     if x:
%o A324681         return min(x)
%o A324681     return 0
%o A324681 #Actual sequence
%o A324681 def a(n):
%o A324681     d = trip(n)
%o A324681     neg=maxorzero([i for i in d['spots'] if i < 0])
%o A324681     pos=minorzero([i for i in d['spots'] if i > 0])
%o A324681     return (-sgn(neg+pos) + [2,0][sgn(neg)])*sgn(n)
%Y A324681 Cf. A228474, A324660-A324692.
%K A324681 sign
%O A324681 0
%A A324681 _David Nacin_, Mar 10 2019
