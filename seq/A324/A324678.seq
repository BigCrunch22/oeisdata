%I A324678 #5 Mar 11 2019 20:45:30
%S A324678 0,0,0,0,0,0,0,-3165,0,0,0,0,-140,-139,0,0,0,-3072845,0,0,-383171,0,0,
%T A324678 0,0,-4869724,0,0,0,-217,-31071367,-1854085,-1854084,-1854083,
%U A324678 -1854082,0,0,-24,-696919,-696918,-26,-1,0,0,-1920,0,-148,-86,-85,-84,-83,-144
%N A324678 Starting at n, a(n) is the minimum negative position from which a spot must be revisited on the next move, or zero if no such positions exist, according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away.
%e A324678 For n=41, the points visited are 41, 40, 38, 35, 31, 26, 20, 13, 5, -4, 6, -5, 7, -6, 8, -7, 9, -8, 10, -9, 11, -10, 12, -11, -35, -60, -34, -61, -33, -62, -32, -1, -33, 0.  The only position from which we are forced to revisit a spot is -1 which forces a return to -33.  As this is the only position and it is negative, it is the minimum negative position and thus a(41)=-1.
%o A324678 (Python)
%o A324678 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324678 #spots - positions in order with possible repetition
%o A324678 #flee - positions from which we move away from zero with possible repetition
%o A324678 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324678 def trip(n):
%o A324678     stucklist = list()
%o A324678     spotsvisited = [n]
%o A324678     leavingspots = list()
%o A324678     turn = 0
%o A324678     forbidden = {n}
%o A324678     while n != 0:
%o A324678         turn += 1
%o A324678         sign = n // abs(n)
%o A324678         st = sign * turn
%o A324678         if n - st not in forbidden:
%o A324678             n = n - st
%o A324678         else:
%o A324678             leavingspots.append(n)
%o A324678             if n + st in forbidden:
%o A324678                 stucklist.append(n)
%o A324678             n = n + st
%o A324678         spotsvisited.append(n)
%o A324678         forbidden.add(n)
%o A324678     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324678                 'turns':turn, 'flee':leavingspots}
%o A324678 def minorzero(x):
%o A324678     if x:
%o A324678         return min(x)
%o A324678     return 0
%o A324678 #Actual sequence
%o A324678 def a(n):
%o A324678     d=trip(n)
%o A324678     return minorzero([i for i in d['stuck'] if i<0])
%Y A324678 Cf. A228474, A324660-A324692.
%K A324678 sign
%O A324678 0,8
%A A324678 _David Nacin_, Mar 10 2019
