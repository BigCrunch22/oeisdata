%I A324671 #14 Mar 14 2019 14:54:12
%S A324671 0,1,4,3,47,46,6,6843,23,22,10,72,471,470,29,15,352,4843985,39,38,
%T A324671 891114,21,102,57,56,7856204,45,44,28,1700,61960674,3702823,3702824,
%U A324671 3702825,3702826,51,36,370,1213998,1213997,596,62,61,60,3855,45,417,260,261,237
%N A324671 Starting at n, a(n) is the distance from zero of the farthest point visited according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away from zero instead.
%H A324671 David Nacin, <a href="/A324671/a324671.png">A324671</a>
%H A324671 David Nacin, <a href="/A324671/a324671_1.png">A324671(n)/A228474(n)</a>
%e A324671 For n=2, the points visited are 2,1,-1,-4,0.  Of those the one farthest from zero is -4 with a distance of 4, hence a(2) = 4.
%o A324671 (Python)
%o A324671 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324671 #spots - positions in order with possible repetition
%o A324671 #flee - positions from which we move away from zero with possible repetition
%o A324671 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324671 def trip(n):
%o A324671     stucklist = list()
%o A324671     spotsvisited = [n]
%o A324671     leavingspots = list()
%o A324671     turn = 0
%o A324671     forbidden = {n}
%o A324671     while n != 0:
%o A324671         turn += 1
%o A324671         sign = n // abs(n)
%o A324671         st = sign * turn
%o A324671         if n - st not in forbidden:
%o A324671             n = n - st
%o A324671         else:
%o A324671             leavingspots.append(n)
%o A324671             if n + st in forbidden:
%o A324671                 stucklist.append(n)
%o A324671             n = n + st
%o A324671         spotsvisited.append(n)
%o A324671         forbidden.add(n)
%o A324671     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324671                 'turns':turn, 'flee':leavingspots}
%o A324671 #Actual sequence
%o A324671 def a(n):
%o A324671     d = trip(n)
%o A324671     return max(abs(i) for i in d['spots'])
%Y A324671 Cf. A228474, A324660-A324692.  Equals max(A248953, -A248952).
%K A324671 nonn
%O A324671 0,3
%A A324671 _David Nacin_, Mar 10 2019
