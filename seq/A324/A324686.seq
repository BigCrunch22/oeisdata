%I A324686 #5 Mar 11 2019 20:46:14
%S A324686 0,0,1,0,8,8,0,409,2,2,0,2,31,31,2,0,15,201444,3,3,25388,0,10,5,5,
%T A324686 347717,3,3,0,75,874341,103653,103652,103652,103652,3,0,10,52376,
%U A324686 52375,48,5,4,4,251,0,32,23,23,16,16,44,10,4,4,0,113,112,111,129093
%N A324686 Starting at n, a(n) is the number of times we move away from zero from a negative position according to the following rules. On the k-th step (k=1,2,3,...) move a distance of k in the direction of zero. If the number landed on has been landed on before, move a distance of k away.
%e A324686 For n=11, the points visited are 11, 10, 8, 5, 1, -4, 2, -5, 3, -6, 4, -7, -19, -32, -18, -3, 13, 30, 12, 31, 51, 72, 50, 27, 51, 26, 0.  Of these, we move away from zero at -7, -19, 13, 12, 31, 51, and 27. Two of these are negative and thus a(11)=2.
%o A324686 (Python)
%o A324686 #Sequences A324660-A324692 generated by manipulating this trip function
%o A324686 #spots - positions in order with possible repetition
%o A324686 #flee - positions from which we move away from zero with possible repetition
%o A324686 #stuck - positions from which we move to a spot already visited with possible repetition
%o A324686 def trip(n):
%o A324686     stucklist = list()
%o A324686     spotsvisited = [n]
%o A324686     leavingspots = list()
%o A324686     turn = 0
%o A324686     forbidden = {n}
%o A324686     while n != 0:
%o A324686         turn += 1
%o A324686         sign = n // abs(n)
%o A324686         st = sign * turn
%o A324686         if n - st not in forbidden:
%o A324686             n = n - st
%o A324686         else:
%o A324686             leavingspots.append(n)
%o A324686             if n + st in forbidden:
%o A324686                 stucklist.append(n)
%o A324686             n = n + st
%o A324686         spotsvisited.append(n)
%o A324686         forbidden.add(n)
%o A324686     return {'stuck':stucklist, 'spots':spotsvisited,
%o A324686                 'turns':turn, 'flee':leavingspots}
%o A324686 def sgn(x):
%o A324686     if x:
%o A324686         return x//abs(x)
%o A324686     return 0
%o A324686 #Actual sequence
%o A324686 def a(n):
%o A324686     d = trip(n)
%o A324686     return sum(1 for i in d['flee'] if i<0)
%Y A324686 Cf. A228474, A324660-A324692.
%K A324686 nonn
%O A324686 0,5
%A A324686 _David Nacin_, Mar 10 2019
