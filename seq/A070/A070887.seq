%I A070887 #32 Feb 16 2025 08:32:46
%S A070887 1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,
%T A070887 1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,
%U A070887 0,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,0,0,0,1,0,1
%N A070887 Triangle read by rows giving successive states of one-dimensional cellular automaton generated by "Rule 110".
%C A070887 New state of cell is 1 in every case except when the previous states of the cell and its two neighbors were all the same, or when the left neighbor was 1 and the cell and its right neighbor were both 0.
%C A070887 A cellular automaton using Rule 110 with arbitrary inputs is a universal Turing machine.
%C A070887 Row n has length n.
%C A070887 T(n,k) = A075437(n-1,k-1), k=1..n. - _Reinhard Zumkeller_, Jun 26 2013
%D A070887 S. Wolfram, A New Kind of Science, Wolfram Media, 2002; p. 31ff..
%H A070887 Reinhard Zumkeller, <a href="/A070887/b070887.txt">Rows n = 1..120 of triangle, flattened</a>
%H A070887 Eric Weisstein's World of Mathematics, <a href="https://mathworld.wolfram.com/Rule110.html">Rule 110</a>
%H A070887 Wikipedia, <a href="http://en.wikipedia.org/wiki/Rule_110">Rule 110</a>
%H A070887 <a href="/index/Ce#cell">Index entries for sequences related to cellular automata</a>
%e A070887 1;
%e A070887 1,1;
%e A070887 1,1,1;
%e A070887 1,1,0,1;
%e A070887 1,1,1,1,1; ...
%p A070887 A070887 := proc(n,k)
%p A070887     option remember;
%p A070887     local lef,mid,rig ;
%p A070887     if k < 1 or k > n then
%p A070887         0;
%p A070887     elif n = 1 then
%p A070887         1;
%p A070887     else
%p A070887         lef := procname(n-1,k-2) ;
%p A070887         mid := procname(n-1,k-1) ;
%p A070887         rig := procname(n-1,k) ;
%p A070887         if lef = mid and mid = rig then
%p A070887             0 ;
%p A070887         elif lef = 1 and mid =0 and rig =0 then
%p A070887             0;
%p A070887         else
%p A070887             1 ;
%p A070887         end if;
%p A070887     end if;
%p A070887 end proc:
%p A070887 for n from 1 to 12 do
%p A070887     for k from 1 to n do
%p A070887         printf("%d ",A070887(n,k)) ;
%p A070887     end do:
%p A070887     printf("\n")
%p A070887 end do: # _R. J. Mathar_, Feb 18 2015
%t A070887 rows = 14; ca = CellularAutomaton[110, {{1}, 0}, rows-1]; Flatten[ Table[ca[[k, rows-k+1 ;; -1]], {k, 1, rows}]] (* _Jean-Fran√ßois Alcover_, May 24 2012 *)
%o A070887 (Haskell)
%o A070887 a070887 n k = a070887_tabl !! (n-1) !! (k-1)
%o A070887 a070887_row n = a070887_tabl !! (n-1)
%o A070887 a070887_tabl = zipWith take [1..] a075437_tabf
%o A070887 -- _Reinhard Zumkeller_, Jun 26 2013
%Y A070887 Cf. A070950, A070886.
%Y A070887 Cf. A047999.
%Y A070887 A071049 gives number of ON cells at n-th generation.
%K A070887 nonn,tabl,nice,easy,changed
%O A070887 1,1
%A A070887 _N. J. A. Sloane_, May 19 2002
%E A070887 More terms from _Hans Havermann_, May 26 2002
