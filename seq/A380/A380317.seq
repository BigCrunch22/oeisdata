%I A380317 #12 Feb 16 2025 22:43:50
%S A380317 1,1,2,2,2,3,4,3,2,2,2,2,3,4,5,6,5,4,3,3,3,2,1,1,1,2,3,3,3,3,4,5,6,7,
%T A380317 6,5,4,3,2,2,2,2,2,2,2,3,4,5,6,7,6,5,4,3,3,3,3,4,5,6,5,4,3,3,3,1,1,2,
%U A380317 2,2,3,4,5,4,3,2,2,2,2,3,4,5,4,3,2,1,1
%N A380317 The lexicographically earliest sequence which is identical to the run lengths of its first differences.
%C A380317 34 is the smallest value that does not appear in the first 10000 terms.
%C A380317 Conjecture: Every positive integer eventually appears.
%H A380317 Dominic McCarty, <a href="/A380317/b380317.txt">Table of n, a(n) for n = 1..10000</a>
%e A380317 The sequence of first differences (where the n-th term is a(n+1)-a(n)) is:
%e A380317 0, 1, 0, 0, 1, 1, -1, -1, 0, 0, 0, 1, 1, 1, 1, -1, -1, -1, 0, 0, ...
%e A380317 The run lengths of consecutive values are:
%e A380317 1, 1, 2, 2, 2, 3, 4, 3, 2, ...
%e A380317 Which is the original sequence.
%o A380317 (Python)
%o A380317 from itertools import groupby
%o A380317 def runs(l): return [len(list(group)) for i, group in groupby(l)]
%o A380317 def firstDifs(l): return [l[i]-l[i-1] for i in range(1,len(l))]
%o A380317 a = [1,1]
%o A380317 while len(runs(firstDifs(a))) <= 100:
%o A380317     a.append(1)
%o A380317     b, m = runs(firstDifs(a)), max(firstDifs(a))
%o A380317     while not (all(b[n] == a[n] for n in range(len(b)-1)) and b[-1] <= a[len(b)-1]):
%o A380317         a[-1] += 1
%o A380317         if a[-1] > m+a[-2]+1: a.pop(); a[-1] += 1 #Backtracking needed
%o A380317         b = runs(firstDifs(a))
%o A380317 print(a[:len(runs(firstDifs(a)))])
%K A380317 nonn,nice,new
%O A380317 1,3
%A A380317 _Dominic McCarty_, Feb 13 2025
