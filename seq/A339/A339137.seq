%I A339137 #15 Dec 09 2020 04:39:38
%S A339137 1,28,225,1540,10217,67388,444017,2925140,19270105,126946444,
%T A339137 836290209,5509263332,36293601737,239092863324,1575081964113,
%U A339137 10376232739316,68355938510649,450311249502892,2966534083948417,19542759549039748,128742647137776169,848123272992954492
%N A339137 Number of (undirected) cycles in the graph C_4 X P_n.
%H A339137 Seiichi Manyama, <a href="/A339137/b339137.txt">Table of n, a(n) for n = 1..1000</a>
%H A339137 Eric Weisstein's World of Mathematics, <a href="http://mathworld.wolfram.com/GraphCycle.html">Graph Cycle</a>
%F A339137 Empirical g.f.: -x*(6*x^3+29*x^2-18*x-1) / ((x-1)^2 * (2*x^3+9*x^2-8*x+1)). - _Vaclav Kotesovec_, Dec 09 2020
%o A339137 (Python)
%o A339137 # Using graphillion
%o A339137 from graphillion import GraphSet
%o A339137 def make_CnXPk(n, k):
%o A339137     grids = []
%o A339137     for i in range(1, k + 1):
%o A339137         for j in range(1, n):
%o A339137             grids.append((i + (j - 1) * k, i + j * k))
%o A339137         grids.append((i + (n - 1) * k, i))
%o A339137     for i in range(1, k * n, k):
%o A339137         for j in range(1, k):
%o A339137             grids.append((i + j - 1, i + j))
%o A339137     return grids
%o A339137 def A339137(n):
%o A339137     universe = make_CnXPk(4, n)
%o A339137     GraphSet.set_universe(universe)
%o A339137     cycles = GraphSet.cycles()
%o A339137     return cycles.len()
%o A339137 print([A339137(n) for n in range(1, 20)])
%Y A339137 Cf. A003699 (Hamiltonian cycles), A288637, A339075, A339136, A339140, A339142, A339143.
%K A339137 nonn
%O A339137 1,2
%A A339137 _Seiichi Manyama_, Nov 25 2020
