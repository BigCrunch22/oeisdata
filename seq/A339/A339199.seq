%I A339199 #17 Feb 16 2025 08:34:01
%S A339199 204,33145,4847163,545217435,61575093671,7050330616441,
%T A339199 808723201743855,92672075290059017,10617254793634907021,
%U A339199 1216460857186123433837,139377550879455782939427,15969325570952770252910697,1829698785056144504575785405,209639263869115933534540710701
%N A339199 Number of (undirected) cycles on the n X 5 king graph.
%H A339199 Seiichi Manyama, <a href="/A339199/b339199.txt">Table of n, a(n) for n = 2..400</a>
%H A339199 Vaclav Kotesovec, <a href="/A339199/a339199.txt">Empirical g.f.</a>
%H A339199 Eric Weisstein's World of Mathematics, <a href="https://mathworld.wolfram.com/GraphCycle.html">Graph Cycle</a>
%H A339199 Eric Weisstein's World of Mathematics, <a href="https://mathworld.wolfram.com/KingGraph.html">King Graph</a>
%o A339199 (Python)
%o A339199 # Using graphillion
%o A339199 from graphillion import GraphSet
%o A339199 def make_nXk_king_graph(n, k):
%o A339199     grids = []
%o A339199     for i in range(1, k + 1):
%o A339199         for j in range(1, n):
%o A339199             grids.append((i + (j - 1) * k, i + j * k))
%o A339199             if i < k:
%o A339199                 grids.append((i + (j - 1) * k, i + j * k + 1))
%o A339199             if i > 1:
%o A339199                 grids.append((i + (j - 1) * k, i + j * k - 1))
%o A339199     for i in range(1, k * n, k):
%o A339199         for j in range(1, k):
%o A339199             grids.append((i + j - 1, i + j))
%o A339199     return grids
%o A339199 def A339098(n, k):
%o A339199     universe = make_nXk_king_graph(n, k)
%o A339199     GraphSet.set_universe(universe)
%o A339199     cycles = GraphSet.cycles()
%o A339199     return cycles.len()
%o A339199 def A339199(n):
%o A339199     return A339098(n, 5)
%o A339199 print([A339199(n) for n in range(2, 20)])
%Y A339199 Column 5 of A339098.
%Y A339199 Cf. A339202.
%K A339199 nonn
%O A339199 2,1
%A A339199 _Seiichi Manyama_, Nov 27 2020
