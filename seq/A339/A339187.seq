%I A339187 #17 Nov 28 2020 20:07:45
%S A339187 0,1,2,2,3,4,4,5,6,6,7,7,8,8,9,9,10,10,11,11,11,12,12,12,13,13,13,14,
%T A339187 14,14,15,15
%N A339187 a(n) is the maximum of f(s) for all binary sequences s of length n where f(s) denote the duplication distance between s and its root.
%C A339187 The duplication distance between two sequences is the minimum number of duplications required to convert the shorter sequence to the longer one.
%C A339187 So for each binary sequence s of length n, we are looking for the number duplication operations of the form x = abc --> y = abbc, where x and y are sequences and a, b, and c are their substrings, needed to generate s starting from a squarefree sequence from the set {0, 1, 01, 10, 010, 101}.
%C A339187 Then a(n) will be the maximum of the duplication distance over all binary sequences.
%H A339187 Noga Alon, Jehoshua Bruck, Farzad Farnoud, and Siddharth Jain, <a href="https://arxiv.org/abs/1611.05537">Duplication Distance to the Root for Binary Sequences</a>, arXiv:1611.05537 [cs.IT], 2016.
%H A339187 Jaros≈Çaw Grytczuk and Szymon Stankiewicz, <a href="https://arxiv.org/abs/2011.12822">Square-free reducts of words</a>, arXiv:2011.12822 [math.CO], 2020.
%o A339187 (Python)
%o A339187 from itertools import product
%o A339187 from functools import lru_cache
%o A339187 @lru_cache(maxsize=None)
%o A339187 def f(s):
%o A339187     if s in {"0", "1", "01", "10", "010", "101"}: return 0
%o A339187     # min over 1+f(abc) for each b where s=abbc; |b|=h, b starts at index i
%o A339187     return min(1+f(s[:i]+s[i+h:]) for i in range(len(s))
%o A339187            for h in range(1,(len(s)-i+1)//2+1) if s[i:i+h]==s[i+h:i+2*h])
%o A339187 def a(n): # by symmetry, it is enough to check strings starting with "0"
%o A339187     return max(f("0"+"".join(s)) for s in product("01", repeat=n-1))
%o A339187 print([a(n) for n in range(1, 15)]) # _Michael S. Branicky_, Nov 27 2020
%K A339187 nonn,more
%O A339187 1,3
%A A339187 _Michel Marcus_, Nov 27 2020
