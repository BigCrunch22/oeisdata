%I A339850 #32 Jul 07 2021 02:01:41
%S A339850 1,4,13,44,148,498,1676,5640,18980,63872,214944,723336,2434192,
%T A339850 8191616,27566672,92768192,312186304,1050578720,3535439040,
%U A339850 11897565568,40038044736,134737229824,453421769728,1525868548224,5134898635008,17280115002368,58151561641216
%N A339850 Number of Hamiltonian circuits within parallelograms of size 3 X n on the triangular lattice.
%H A339850 Seiichi Manyama, <a href="/A339850/b339850.txt">Table of n, a(n) for n = 2..1000</a>
%H A339850 Paul Barry, <a href="https://arxiv.org/abs/2104.01644">Centered polygon numbers, heptagons and nonagons, and the Robbins numbers</a>, arXiv:2104.01644 [math.CO], 2021.
%H A339850 M. Peto, <a href="https://doi.org/10.31274/rtd-180813-17105">Studies of protein designability using reduced models</a>, Thesis, 2007.
%H A339850 <a href="/index/Rec#order_03">Index entries for linear recurrences with constant coefficients</a>, signature (2,4,2).
%F A339850 G.f.: (x*(1+x))^2/(1-2*x-4*x^2-2*x^3).
%F A339850 a(n) = 2*a(n-1) + 4*a(n-2) + 2*a(n-3) for n > 4.
%e A339850 a(2) = 1:
%e A339850       *---*
%e A339850      /   /
%e A339850     *   *
%e A339850    /   /
%e A339850   *---*
%e A339850 a(3) = 4:
%e A339850       *   *---*      *---*---*
%e A339850      / \ /   /        \     /
%e A339850     *   *   *      *---*   *
%e A339850    /       /      /       /
%e A339850   *---*---*      *---*---*
%e A339850       *---*---*      *---*---*
%e A339850      /       /      /       /
%e A339850     *   *   *      *   *---*
%e A339850    /   / \ /      /     \
%e A339850   *---*   *      *---*---*
%t A339850 Drop[CoefficientList[Series[(x (1 + x))^2/(1 - 2 x - 4 x^2 - 2 x^3), {x, 0, 28}], x], 2] (* _Michael De Vlieger_, Jul 06 2021 *)
%o A339850 (PARI) my(N=66, x='x+O('x^N)); Vec((x*(1+x))^2/(1-2*x-4*x^2-2*x^3))
%o A339850 (Python)
%o A339850 # Using graphillion
%o A339850 from graphillion import GraphSet
%o A339850 def make_T_nk(n, k):
%o A339850     grids = []
%o A339850     for i in range(1, k + 1):
%o A339850         for j in range(1, n):
%o A339850             grids.append((i + (j - 1) * k, i + j * k))
%o A339850             if i < k:
%o A339850                 grids.append((i + (j - 1) * k, i + j * k + 1))
%o A339850     for i in range(1, k * n, k):
%o A339850         for j in range(1, k):
%o A339850             grids.append((i + j - 1, i + j))
%o A339850     return grids
%o A339850 def A339849(n, k):
%o A339850     universe = make_T_nk(n, k)
%o A339850     GraphSet.set_universe(universe)
%o A339850     cycles = GraphSet.cycles(is_hamilton=True)
%o A339850     return cycles.len()
%o A339850 def A339850(n):
%o A339850     return A339849(3, n)
%o A339850 print([A339850(n) for n in range(2, 21)])
%Y A339850 Row 3 of A339849.
%Y A339850 Cf. A339200.
%K A339850 nonn
%O A339850 2,2
%A A339850 _Seiichi Manyama_, Dec 19 2020
