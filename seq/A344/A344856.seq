%I A344856 #40 Jun 13 2021 06:05:23
%S A344856 3,7,12,23,18,41,32,83,70,121,102,181,128,239,206,309,282,377,298,471,
%T A344856 496,427,578,537,528,705,702,891,804,1013,958,1155,1224,1039,1116,
%U A344856 1415,1476,1287,1366,1773,1570,1617,1926,1873,1836,2179,2162,2527,2434,2337
%N A344856 Bitwise XOR of prime(n) and n^2.
%C A344856 This is effectively the bitwise XOR of A000040 and A000290.
%H A344856 Chai Wah Wu, <a href="/A344856/b344856.txt">Table of n, a(n) for n = 1..10000</a>
%H A344856 Chris von Csefalvay, <a href="https://datalore.jetbrains.com/view/notebook/3rtSg83skvUfcW6ILJ0bRS">Bitwise prime-square sequences ("Jellyfish Hearts")</a>.
%H A344856 Wikipedia, <a href="https://en.wikipedia.org/wiki/Bitwise operation">Bitwise operation</a>
%F A344856 a(n) = prime(n) XOR n^2.
%F A344856 a(n) = A003987(A000040(n), A000290(n)).
%e A344856 For n=3, a(3) is prime(3) XOR 3^2 = 5 XOR 9 or b(0101) XOR b(1001) = (b)1100, which in base 10 is 12.
%p A344856 a:= n-> Bits[Xor](n^2, ithprime(n)):
%p A344856 seq(a(n), n=1..50);  # _Alois P. Heinz_, May 30 2021
%t A344856 a[n_] := BitXor[n^2, Prime[n]]; Array[a, 50] (* _Amiram Eldar_, Jun 05 2021 *)
%o A344856 (Python)
%o A344856 from sympy import primerange, prime
%o A344856 import numpy
%o A344856 def a_vector(n):
%o A344856     primes = list(primerange(0, prime(n)))
%o A344856     squares = [x ** 2 for x in range(1, n)]
%o A344856     return numpy.bitwise_xor(primes, squares)
%o A344856 (PARI) A344856(n) = bitxor(prime(n),n*n); \\ _Antti Karttunen_, Jun 05 2021
%o A344856 (Python)
%o A344856 from sympy import prime
%o A344856 def A344856(n): return prime(n) ^ n**2 # _Chai Wah Wu_, Jun 12 2021
%Y A344856 Cf. A000040, A000290, A003987, A070883, A169810.
%K A344856 nonn,base
%O A344856 1,1
%A A344856 _Chris von Csefalvay_, May 30 2021
