%I A143077 #21 Apr 26 2020 15:19:55
%S A143077 1,1,4,31,485,27343,3595117,1359551201,1310562076858,3378072688461451,
%T A143077 22702751567715567129,401359405793550977993221,
%U A143077 18572242457139030215454649193,2252593125544789695036793639095505
%N A143077 a(n) is the n-th term of a pseudo-Fibonacci sequence created by applying the function fib(1,...,n) to itself n times.
%C A143077 This sequence grows faster than any exponential sequence. The implementation here is quite slow.
%C A143077 Let g(x) be fib(1,1,x), g returns y; let h(y) be fib(1,y,x), h returns z; let i(z) be z be applied to itself x-1 times. Then f(x) = i(h(g(x))).
%e A143077 n=1: fib(1,1,n);
%e A143077 n=2: fib(1,fib(1,1,n),n);
%e A143077 n=3: fib(1,fib(1,fib(1,1,n),n),n) ...
%e A143077   f(3) is fib(1,fib(1,fib(1,1,3),3),3);
%e A143077   f(3) simplifies to fib(1,fib(1,2,3),3);
%e A143077   f(3) simplifies to fib(1,3,3);
%e A143077   f(3) is 4.
%o A143077 (Python)
%o A143077 def fib(arb1, arb2, nth):
%o A143077     if nth == 0:
%o A143077         return arb1
%o A143077     if nth == 1:
%o A143077         return arb2
%o A143077     x = [0]*nth
%o A143077     x[0] = arb1
%o A143077     x[1] = arb2
%o A143077     for i in range(2, nth, 1):
%o A143077         x[i] = x[i-1]+x[i-2]
%o A143077     return x[-1]
%o A143077 def fib2d(n):
%o A143077     return fib(1, fib(1, 1, n), n)
%o A143077 def fib3d(n):
%o A143077     return fib(1, fib(1, fib(1, 1, n), n), n)
%o A143077 def slowfibnd(n): # This is an inelegant way to generate a(n)
%o A143077     begin = "fib(1, 0+1, n)"
%o A143077     for x in range(n-1):
%o A143077         begin = begin.replace('0+1', 'fib(1, 0+1, n)')
%o A143077     return eval(begin)
%Y A143077 Cf. A000045 is the Fibonacci function fib(1, 1, n), A142975 is the Fibonacci function applied to itself fib(1, fib(1, 1, n), n).
%K A143077 nonn
%O A143077 1,3
%A A143077 Gregory Nisbet (gregory.nisbet(AT)gmail.com), Jul 22 2008
