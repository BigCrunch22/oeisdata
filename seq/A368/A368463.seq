%I A368463 #17 Dec 28 2023 15:04:00
%S A368463 0,1,0,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,0,1,0,0,
%T A368463 0,1,1,1,0,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,
%U A368463 1,1,0,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1
%N A368463 Parity of the iterates of the Christmas tree pattern map (A367508), read by rows.
%C A368463 See A367508 for the description of the Christmas tree patterns, references and links.
%H A368463 Paolo Xausa, <a href="/A368463/b368463.txt">Table of n, a(n) for n = 1..8190</a> (first 12 orders, flattened).
%F A368463 a(n) = A367508(n) mod 2.
%p A368463 The first 4 tree pattern orders are shown below (left), with the corresponding parity on the right.
%p A368463 .
%p A368463 Order 1:                        |
%p A368463               0  1              |      0  1
%p A368463                                 |
%p A368463 Order 2:                        |
%p A368463                10               |        0
%p A368463            00  01  11           |     0  1  1
%p A368463                                 |
%p A368463 Order 3:                        |
%p A368463             100  101            |      0  1
%p A368463             010  110            |      0  0
%p A368463        000  001  011  111       |   0  1  1  1
%p A368463                                 |
%p A368463 Order 4:                        |
%p A368463               1010              |        0
%p A368463         1000  1001  1011        |     0  1  1
%p A368463               1100              |        0
%p A368463         0100  0101  1101        |     0  1  1
%p A368463         0010  0110  1110        |     0  0  0
%p A368463   0000  0001  0011  0111  1111  |  0  1  1  1  1
%p A368463 .
%t A368463 With[{imax=6},Map[Mod[FromDigits[#],2]&,NestList[Map[Delete[{If[Length[#]>1,Map[#<>"0"&,Rest[#]],Nothing],Join[{#[[1]]<>"0"},Map[#<>"1"&,#]]},0]&],{{"0","1"}},imax-1],{3}]] (* Generates terms up to order 6 *)
%o A368463 (Python)
%o A368463 from itertools import islice
%o A368463 from functools import reduce
%o A368463 def uniq(r): return reduce(lambda u, e: u if e in u else u+[e], r, [])
%o A368463 def agen():  # generator of terms
%o A368463     R = [["0", "1"]]
%o A368463     while R:
%o A368463         r = R.pop(0)
%o A368463         yield from map(lambda b: int(b[-1]), r)
%o A368463         if len(r) > 1: R.append(uniq([r[k]+"0" for k in range(1, len(r))]))
%o A368463         R.append(uniq([r[0]+"0", r[0]+"1"] + [r[k]+"1" for k in range(1, len(r))]))
%o A368463 print(list(islice(agen(), 94))) # _Michael S. Branicky_, Dec 25 2023
%Y A368463 Cf. A367508, A367562, A368464, A368465.
%K A368463 nonn,tabf,changed
%O A368463 1
%A A368463 _Paolo Xausa_, Dec 25 2023
