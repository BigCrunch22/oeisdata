%I A105098 #20 Dec 21 2020 01:52:55
%S A105098 0,0,0,1,1,2,2,2,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,11,12,12,13,13,14,
%T A105098 15,15,16,16,17,17,18,18,19,20,20
%N A105098 Minimum number of squares (repeated adjacent nonempty subwords) in a binary string of length n.
%C A105098 This sequence counts "occurrences" of (possibly identical) squares, overlaps allowed.  See Kucherov et al. link. - _Michael S. Branicky_, Dec 20 2020
%H A105098 G. Kucherov, P. Ochem and M. Rao, <a href="https://doi.org/10.37236/1705">How many square occurrences must a binary sequence contain?</a>, Electronic Journal of Combinatorics V. 10 (2003), paper #R12.
%e A105098 a(4) = 1 because every string of length > 3 contains at least one square and 0100 contains only one square.
%o A105098 (Python)
%o A105098 from itertools import product
%o A105098 def count_overlaps(subs, s):
%o A105098   c = i = 0
%o A105098   while i != -1:
%o A105098     i = s.find(subs, i)
%o A105098     if i != -1: c += 1; i += 1
%o A105098   return c
%o A105098 def a(n):
%o A105098   if n == 1: return 0
%o A105098   squares = ["".join(u) + "".join(u)
%o A105098     for r in range(1, n//2 + 1) for u in product("01", repeat = r)]
%o A105098   words = ("0"+"".join(w) for w in product("10", repeat=n-1))
%o A105098   themin = n*n
%o A105098   for w in words:
%o A105098     numw = 0
%o A105098     for s in squares:
%o A105098       numw += count_overlaps(s, w)
%o A105098       if numw >= themin: break
%o A105098     else: themin = min(themin, numw)
%o A105098   return themin
%o A105098 print([a(n) for n in range(1, 21)]) # _Michael S. Branicky_, Dec 20 2020
%K A105098 nonn,hard,more
%O A105098 1,6
%A A105098 _Jeffrey Shallit_, Apr 07 2005
