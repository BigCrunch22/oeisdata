%I A007224 M1933 #30 Mar 09 2023 08:28:56
%S A007224 2,9,38,143,546,2066,7752,29070,108968,408595,1533870,5766243,
%T A007224 21710850,81880920,309328008,1170524970,4436618940,16842720336,
%U A007224 64037794548,243836217702,929759970392,3549992610584,13571935767600,51950354135888
%N A007224 Number of distinct perforation patterns for deriving (v,b) = (n+3,n) punctured convolutional codes from (2,1).
%C A007224 From _Petros Hadjicostas_, Jul 27 2020: (Start)
%C A007224 "A punctured convolutional code is a high-rate code obtained by the periodic elimination (i.e., puncturing) of specific code symbols from the output of a low-rate encoder. The resulting high-rate code depends on both the low-rate code, called the original code, and the number and specific positions of the punctured symbols." (The quote is from Haccoun and Bégin (1989).)
%C A007224 A high-rate code (v,b) (written as R = b/v) can be constructed from a low-rate code (v0,1) (written as R = 1/v0) by deleting from every v0*b code symbols a number of v0*b - v symbols (so that the resulting rate is R = b/v).
%C A007224 Even though the formulas below do not appear in the two published papers in the IEEE Transactions on Communications, from the theory in those two papers, it makes sense to replace "k|b" with "k|v0*b" (and "k|gcd(v,b)" with "k|gcd(v,v0*b)"). Pab Ter, however, uses "k|b" in the Maple program below. (End)
%D A007224 Guy Bégin, On the enumeration of perforation patterns for punctured convolutional codes, Séries Formelles et Combinatoire Algébrique, 4th colloquium, 15-19 Juin 1992, Montréal, Université du Québec à Montréal, pp. 1-10.
%D A007224 N. J. A. Sloane and Simon Plouffe, The Encyclopedia of Integer Sequences, Academic Press, 1995 (includes this sequence).
%H A007224 Guy Bégin and David Haccoun, <a href="https://doi.org/10.1109/26.44210">High rate punctured convolutions codes: Structure properties and construction techniques</a>, IEEE Transactions on Communications 37(12) (1989), 1381-1385.
%H A007224 David Haccoun and Guy Bégin, <a href="https://doi.org/10.1109/26.46505">High rate punctured convolutional codes for Viterbi and sequential coding</a>, IEEE Transactions on Communications, 37(11) (1989), 1113-1125; see Section II.
%F A007224 From _Petros Hadjicostas_, Jul 27 2020: (Start)
%F A007224 The number of perforation patterns to derive high-rate convolutional code (v,b) (written as R = b/v) from a given low-rate convolutional code (v0, 1) (written as R = 1/v0) is (1/b)*Sum_{k|gcd(v,b)} phi(k)*binomial(v0*b/k, v/k).
%F A007224 According to Pab Ter's Maple code, this is the coefficient of z^v in the polynomial (1/b)*Sum_{k|b} phi(k)*(1 + z^k)^(v0*b/k).
%F A007224 Here (v,b) = (n+3,n) and (v0,1) = (2,1), so
%F A007224 a(n) = (1/n)*Sum_{k|gcd(n+3,n)} phi(k)*binomial(2*n/k, (n+3)/k).
%F A007224 This simplifies to
%F A007224 a(n) = (1/n)*(binomial(2*n, n+3) + 2*[(n mod 3) == 0]*binomial(2*n/3, (n/3) + 1)). (End)
%p A007224 with(numtheory):P:=proc(b,v0) local k: RETURN(add(phi(k)*(1+z^k)^(v0*(b/k)),k=divisors(b))/b): end; seq(coeff(P(b,2),z,b+3),b=4..40); (Pab Ter)
%t A007224 a[n_] := DivisorSum[GCD[n+3, n], EulerPhi[#] Binomial[2n/#, (n+3)/#]&]/n;
%t A007224 Table[a[n], {n, 4, 40}] (* _Jean-François Alcover_, Mar 09 2023 *)
%Y A007224 Cf. A007223, A007229.
%K A007224 nonn
%O A007224 4,1
%A A007224 _Simon Plouffe_
%E A007224 More terms from Pab Ter (pabrlos2(AT)yahoo.com), Nov 13 2005
