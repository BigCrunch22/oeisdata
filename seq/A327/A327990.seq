%I A327990 #9 Oct 09 2019 01:58:49
%S A327990 0,1,3,1,7,3,1,9,15,7,3,1,19,17,31,9,15,7,3,1,21,39,35,33,63,19,17,31,
%T A327990 9,15,7,3,1,43,41,79,37,71,67,65,127,21,39,35,33,63,19,17,31,9,15,7,3,
%U A327990 1
%N A327990 The Fibonacci Codes. Irregular triangle T(n, k) with n >= 0 and 0 <= k < A000045(n+1).
%C A327990 The Fibonacci codes are binary strings enumerated in an irregular triangle FC(n, k). The first few are shown below in the Example section.
%C A327990 The Fibonacci codes are for n > 1 defined recursively FC(n) = C(n) concatenated with FC(n-1), where C(n) are the conjugates of the compositions of n which do not have '1' as a part and the parts of which were reduced by 1. The recurrence is based in FC(0) = '' (empty string) and FC(1) = '0'.
%C A327990 The Fibonacci numbers are defined F(n) = A309896(2,n) = A000045(n+1) for n >= 0. Row FC(n) contains F(n) codes. A nonzero code is a code that does not consist entirely of zeros. The number of nonzero codes in row n is A001924(n-3) for n>=3.
%C A327990 Fibonacci codes are represented here through
%C A327990     T(n, k) = Sum_{j=0..m} (c[j] + 1)*2^j,
%C A327990 where c = FC(n, k) and m = length(FC(n, k)).
%e A327990 The Fibonacci codes start:
%e A327990 [0] [[]]
%e A327990 [1] [[0]]
%e A327990 [2] [[00][0]]
%e A327990 [3] [[000][00][0]]
%e A327990 [4] [[010][0000][000][00][0]]
%e A327990 [5] [[0010][0100][00000][010][0000][000][00][0]]
%e A327990 [6] [[0110][00010][00100][01000][000000][0010][0100][00000][010][0000][000][00][0]]
%e A327990 [7] [[00110][01010][000010][01100][000100][001000][010000][0000000][0110][00010][00100][01000][000000][0010][0100][00000][010][0000][000][00][0]]
%e A327990 The encoding of the Fibonacci codes start:
%e A327990 [0] [0]
%e A327990 [1] [1]
%e A327990 [2] [3, 1]
%e A327990 [3] [7, 3, 1]
%e A327990 [4] [9, 15, 7, 3, 1]
%e A327990 [5] [19, 17, 31, 9, 15, 7, 3, 1]
%e A327990 [6] [21, 39, 35, 33, 63, 19, 17, 31, 9, 15, 7, 3, 1]
%e A327990 [7] [43, 41, 79, 37, 71, 67, 65, 127, 21, 39, 35, 33, 63, 19, 17, 31, 9, 15, 7, 3, 1]
%o A327990 (SageMath)
%o A327990 @cached_function
%o A327990 def FibonacciCodes(n):
%o A327990     if n == 0 : return [[]]
%o A327990     if n == 1 : return [[0]]
%o A327990     A = [c.conjugate() for c in Compositions(n) if not(1 in c)]
%o A327990     B = [[i-1 for i in a] for a in A]
%o A327990     return B + FibonacciCodes(n-1)
%o A327990 def A327990row(n):
%o A327990     FC = FibonacciCodes(n)
%o A327990     B = lambda C: sum((c+1)*2^i for (i, c) in enumerate(C))
%o A327990     return [B(c) for c in FC]
%o A327990 for n in (0..6): print(A327990row(n))
%Y A327990 Cf. A309896, A000045, A001924.
%K A327990 nonn,tabf
%O A327990 0,3
%A A327990 _Peter Luschny_, Oct 08 2019
