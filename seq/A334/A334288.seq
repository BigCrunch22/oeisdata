%I A334288 #35 Jan 09 2021 02:11:23
%S A334288 1,6,30,180,1002,6012,34224,205344,1180010,7080060,40911324,245467944,
%T A334288 1423944024,8543664144,49710351720,298262110320,1739627237002,
%U A334288 10437763422012,61002039226716,366012235360296,2142786218045748,12856717308274488,75380119335678608
%N A334288 Number of tieless rugby (union) games with n scoring events.
%C A334288 In rugby (union) a scoring event can give 3, 5 or 7 points.
%C A334288 In April 1992 the current scoring format was introduced: 3 points are awarded for kicks/penalties, 5 points for unconverted tries and 7 points for converted tries. A game is a list of members of {-7,-5,-3,3,5,7} with negative points for the away team, positive for the home team.
%C A334288 A tieless game is one in which the teams never have the same score (except at the beginning, when no team has scored yet).
%H A334288 Cameron Ford, <a href="/A334288/b334288.txt">Table of n, a(n) for n = 0..1286</a>
%e A334288 a(2)=30, because there are 6^2=36 sequences of length 2 from {3,5,7,-3,-5,-7}; the 6 sequences that correspond to games with ties are precisely those of the form {k,-k}.
%o A334288 (Python)
%o A334288 def number_of_tieless_rugby_games(n):
%o A334288     """
%o A334288     Returns the number of tieless rugby games with n scoring events.
%o A334288     A scoring event is a number in (-7,-5,-3,3,5,7) and a game is tieless
%o A334288     if the score is never zero, apart from at the start.
%o A334288     Negative points represent points for the away team, positive points
%o A334288     represent points for the home team
%o A334288     """
%o A334288     dictionary_of_scores = {0:1}
%o A334288     # The keys of this dictionary represent possible scores.
%o A334288     # The values represent the number of ways this score can be reached.
%o A334288     scoring_events = (-7,-5,-3,3,5,7)
%o A334288     for i in range(n):
%o A334288         # At each stage, we have the nonzero scores with i scoring events in
%o A334288         # dictionary_of_scores. To find nonzero scores with i+1 scoring events
%o A334288         # consider each nonzero score, and each possibility for the next
%o A334288         # scoring event.
%o A334288         old_dictionary = dictionary_of_scores
%o A334288         dictionary_of_scores = {}
%o A334288         for score, number_of_ways in old_dictionary.items():
%o A334288             for scoring_event in scoring_events:
%o A334288                 new_score = score + scoring_event
%o A334288                 if new_score != 0:
%o A334288                     dictionary_of_scores[new_score] =\
%o A334288                     dictionary_of_scores.get(new_score, 0) + number_of_ways
%o A334288     return sum(dictionary_of_scores.values())
%Y A334288 Inspired by A137684.
%K A334288 nonn
%O A334288 0,2
%A A334288 _Cameron Ford_, Jun 13 2020
