%I A084580 #24 Dec 10 2024 10:22:16
%S A084580 1,1,2,1,1,3,2,1,1,1,4,2,1,3,1,2,1,5,1,1,2,1,3,6,1,4,2,1,1,1,2,3,1,7,
%T A084580 1,2,1,5,1,4,2,1,3,1,8,1,2,1,1,3,2,1,6,1,4,9,1,2,1,5,1,3,2,1,1,1,2,10,
%U A084580 1,4,3,1,7,2,1,1,1,2,1,3,5,1,11,2,6,1,4,1,2,1,3,1,1,8,2,1,1,12,2,1,3,4,1,1
%N A084580 Let y = m/GK(k), where m and k vary over the positive integers and GK(k)=log(1+1/(k*(k+2)))/log(2) is the Gauss-Kuzmin distribution of k. Sort the y values by size and number them consecutively by n. This sequence gives the values of k in order by n.
%C A084580 The geometric mean of the sequence equals Khintchine's constant K=2.685452001 = A002210 since the frequency of the integers agrees with the Gauss-Kuzmin distribution. When considered as a continued fraction, the resulting constant is 0.5815803358828329856145... = A372869 = [0;1,1,2,1,1,3,2,1,1,1,4,2,1,...].
%C A084580 This can also be defined as the sequence formed by sequentially sampling the Gauss-Kuzmin distribution. - _Jwalin Bhatt_, Nov 28 2024
%o A084580 (Python)
%o A084580 import math
%o A084580 def pmf(k):
%o A084580   return -math.log2(1-(1/((k+1)**2)))
%o A084580 def sample_from_pmf(num_coeffs):
%o A084580   coeffs, counts = [], [0]
%o A084580   for _ in range(num_coeffs):
%o A084580     min_time = math.inf
%o A084580     for i, count in enumerate(counts, start=1):
%o A084580       time = (count+1) / pmf(i)
%o A084580       if time < min_time:
%o A084580         min_index, min_time = i, time
%o A084580     if min_index == len(counts):
%o A084580       counts.append(0)
%o A084580     counts[min_index-1] += 1
%o A084580     coeffs.append(min_index)
%o A084580   return coeffs
%o A084580 A084580 = sample_from_pmf(100) # _Jwalin Bhatt_, Nov 28 2024
%Y A084580 Cf. A002210, A084576-A084579, A084581-A084587, A372869.
%K A084580 nonn,changed
%O A084580 1,3
%A A084580 _Paul D. Hanna_, May 31 2003
