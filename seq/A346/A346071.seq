%I A346071 #72 Oct 05 2021 22:43:34
%S A346071 6,18,54,87,108,174,174,324,324,324,492,492,492,984,984,1296,1296,
%T A346071 1296,1440,1440,2592,2592,2592,2592,3960,3960,3960,3960,4320,4320,
%U A346071 4320,5760,5940,5940,5940,5940,5940,5940,8640,9900,9900,9900,11880,11880,11880,11880,11880
%N A346071 a(n) is the smallest number m such that m^3 = x^3 + y^3 + z^3, x > y > z > 0, has at least n different solutions.
%C A346071 a(n) is the smallest number for which there are at least n sets of positive integers (b_i, c_i, d_i) i=1..n which satisfy the equation a(n)^3 = b_i^3 + c_i^3 + d_i^3.
%C A346071 This sequence is related to Euler's sum of powers conjecture. In particular to the case k=3, a(n) is the smallest number that has at least n different solutions to the equation.
%C A346071 The sequences of numbers whose cubes can be expressed as the sum of 3 positive cubes in at least n ways for n = 1, 2, 3, ... form a family of related sequences. This sequence is the sequence of first terms in that family of sequences.
%C A346071 The first of this family is A023042.
%H A346071 Wikipedia, <a href="https://en.wikipedia.org/wiki/Euler%27s_sum_of_powers_conjecture">Euler's sum of powers conjecture</a>
%e A346071 a(1) = 6 because 6^3 = 5^3 + 4^3 + 3^3; 6 = a(1) = A023042(1).
%e A346071 a(2) = 18 because 18^3 = 15^3 + 12^3 + 9^3 = 16^3 + 12^3 + 2^3.
%e A346071 a(3) = 54 because 54^3 = 45^3 + 36^3 + 27^3 = 48^3 + 36^3 + 6^3 = 53^3 + 19^3 + 12^3.
%o A346071 (Python)
%o A346071 import numpy as np
%o A346071 def residual(a,b,c,d, exp=3):
%o A346071     return a**exp-b**exp-c**exp-d**exp
%o A346071 def test(max_n,k=3):
%o A346071     ans=dict()
%o A346071     for a in range(max_n):
%o A346071         #print(a)
%o A346071         for b in range(int(np.ceil((a**k/3)**(1/k))),a):
%o A346071             n3=a**k-b**k
%o A346071             for c in range(int(np.ceil((n3/2)**(1/k))),b):
%o A346071                 m3=n3-c**k
%o A346071                 if m3<0:
%o A346071                     break;
%o A346071                 l=int(np.ceil((m3)**(1/k)))
%o A346071                 options=[l,l-1]
%o A346071                 for d in options:
%o A346071                     res=residual(a,b,c,d, exp=k)
%o A346071                     if res==0:
%o A346071                         if a in ans.keys():
%o A346071                             ans[a].append((a,b,c,d))
%o A346071                         else:
%o A346071                             ans[a]=[(a,b,c,d)]
%o A346071                         #print("found:",(a,b,c,d))
%o A346071                         break
%o A346071                     else:
%o A346071                         #print("tested: {0}, residual: {1}".format((a,b,c,d),res))
%o A346071                         if res>0:
%o A346071                             break
%o A346071     return ans
%o A346071 def serie(N):
%o A346071     result=test(N)
%o A346071     results_by_number_of_answers=[]
%o A346071     results_by_number_of_answers.append(result)
%o A346071     temp=dict()
%o A346071     for k in result.keys():
%o A346071         if len(result[k])>=2:
%o A346071             temp[k]=result[k]
%o A346071     results_by_number_of_answers.append(temp)
%o A346071     i=3
%o A346071     while len(temp)>0:
%o A346071         temp=dict()
%o A346071         for k in results_by_number_of_answers[-1].keys():
%o A346071             if len(results_by_number_of_answers[-1][k])>=i:
%o A346071                 temp[k]=result[k]
%o A346071         if len(temp)>0:
%o A346071             results_by_number_of_answers.append(temp)
%o A346071         i+=1
%o A346071     return [next(iter(a)) for a in results_by_number_of_answers]
%o A346071 #Get the elements of the serie up until A_n>1000
%o A346071 A=serie(1000)
%o A346071 print(A)
%o A346071 (Python)
%o A346071 from itertools import combinations
%o A346071 from collections import Counter
%o A346071 from sympy import integer_nthroot
%o A346071 def icbrt(n): return integer_nthroot(n, 3)[0]
%o A346071 def aupto(mmax):
%o A346071     cbs = [i**3 for i in range(mmax+1)]
%o A346071     cbsset = set(cbs)
%o A346071     c = Counter(sum(c) for c in combinations(cbs, 3) if sum(c) in cbsset)
%o A346071     nmax = max(c.values())
%o A346071     return [min(icbrt(s) for s in c if c[s] >= n) for n in range(1, nmax+1)]
%o A346071 print(aupto(500)) # _Michael S. Branicky_, Sep 04 2021
%Y A346071 Cf. A023042, A025418, A346137, A316359.
%K A346071 nonn,more
%O A346071 1,1
%A A346071 _Sebastian Magee_, Jul 30 2021
%E A346071 a(16)-a(31) from _Jinyuan Wang_, Aug 02 2021
%E A346071 More terms from _David A. Corneth_, Sep 04 2021
