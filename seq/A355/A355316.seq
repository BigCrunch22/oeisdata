%I A355316 #27 Aug 30 2022 16:08:05
%S A355316 0,10,1110,333110,333322110,4444322222110,444441355555222110,
%T A355316 5555541113555555333222110,5555551433311366666653333333222110,
%U A355316 6666665111433332211366666661577777773333222110,66666661533311444443222221137777777611157777777744443333222110
%N A355316 Stuttering Look and Say sequence with seed 0.
%C A355316 If we let L(n) denote the number of digits in the n-th term, then the limit of L(n+1)/L(n) is an algebraic integer of degree 415. This limit is a stuttering analog of Conway's constant (see A014715).
%H A355316 Michael S. Branicky, <a href="/A355316/b355316.txt">Table of n, a(n) for n = 1..18</a>
%H A355316 Jonathan Comes, <a href="https://arxiv.org/abs/2206.11991">Stuttering look and say sequences and a challenger to Conway's most complicated algebraic number from the silliest source</a>, arXiv:2206.11991 [math.HO], 2022.
%e A355316 E.g., to obtain the term after 1110, we look at 1110 and see "three 1's and one 0". We then say what we saw by stuttering the counts as many times as the count prescribes: we stutter the "three" 3 times and the "one" 1 time (no stutter); so we say "three three three 1's and one 0" to get 333110.
%o A355316 (Python)
%o A355316 from itertools import accumulate, groupby, repeat
%o A355316 def summarize(n, _): return int("".join(str(c:=len(list(g)))*c+k for k, g in groupby(str(n))))
%o A355316 def aupton(terms): return list(accumulate(repeat(0, terms), summarize))
%o A355316 print(aupton(11)) # _Michael S. Branicky_, Jun 28 2022
%o A355316 (PARI) first(n) = my(c, d=[0], x, res=vector(n)); for(i=2, n, c=1; x=""; for(j=1, #d, if(j<#d && d[j]==d[j+1], c++, x=concat(x, concat(vector(c+1, k, Str(if(k==c+1, d[j], c))))); c=1)); res[i]=eval(x); d=digits(res[i])); res \\ _Iain Fox_, Jun 30 2022
%Y A355316 Stuttering variant of A001155.
%Y A355316 Cf. A014715.
%K A355316 base,nonn
%O A355316 1,2
%A A355316 _Jonathan Comes_, Jun 28 2022
