%I A370449 #11 Mar 02 2024 14:20:01
%S A370449 1,1,4,726,3020778029791104,
%T A370449 1356952251391926002664799322274919178558749179143258568252348272194427343469119954161606283821760
%N A370449 Denominator of probability to directly sort n uniform random values in [0,1] with perfect strategy.
%C A370449 Given n random numbers distributed uniformly in [0,1], and a list of n places to put them, P(n) = A370448(n)/A370449(n) describes the probability that one is able to sort them directly in order with the following procedure:
%C A370449 Take the first number. Without knowledge about the following numbers, place the number in the list such that the list is ordered (without moving any other number). Repeat until this is not possible anymore (i.e. because the new number would need to be inserted between two previously placed numbers directly next to each other on the list). If there are multiple valid spaces for placing the number in the list, the space is chosen that maximizes the total success probability. These probabilities are rational.
%H A370449 Philip Geißler, <a href="/A370449/b370449.txt">Table of n, a(n) for n = 0..6</a>
%F A370449 P(0) = 1
%F A370449 P(n+1) = Integral_{x=0..1} max_{L=0..n} C_{L,n-L} x^L (1-x)^{n-L} dx
%F A370449 C_{L,R} = (L+R)!/(L!R!) a(L) a(R)
%F A370449 where P(n) = A370448(n)/A370449(n)
%F A370449 and C(L,R) = A370450(L,R)/A370451(L,R)
%e A370449 For n=2, one has two options to place the first number in the list of 2 spaces.
%e A370449 If the first random number r_1 is >0.5, one should place it on the right space (assuming an ascending list) because it maximizes the probability that the next number r_2 can still be placed in the list.
%e A370449 Without knowledge of r_2: P(r_2 can be placed after r_1 is placed on the right space) = P(r_2<r_1) = r_1.
%e A370449 Equivalently, if r_1 is <0.5, one should place it on the left space.
%e A370449 Without knowledge of r_2: P(r_2 can be placed after r_1 is placed on the left space) = P(r_2>r_1) = 1-r_1.
%e A370449 Thus, P(r_2 can be placed after r_1 is placed optimally) = max(r_1, 1-r_1).
%e A370449 For the total probability {P(n)}(2) that both numbers can be placed such that they are ordered, the above expression needs to be integrated over r_1:
%e A370449 {P(n)}(2) = Integral_{x=0..1} max(x, 1-x) dx = 3/4 = A370448(2)/A370449(2).
%e A370449 This means that A370449(2) = 4.
%o A370449 (Python)
%o A370449 import sympy
%o A370449 binomial_sym_sympy = lambda L, R : sympy.functions.combinatorial.factorials.binomial(L+R, L)
%o A370449 @functools.cache
%o A370449 def C_analytic(L, R):
%o A370449     return binomial_sym_sympy(L, R) * P_analytic(L) * P_analytic(R)
%o A370449 @functools.cache
%o A370449 def P_analytic(n):
%o A370449     _zero, _one, _x = sympy.core.numbers.Zero(), sympy.core.numbers.One(), sympy.symbols("x")
%o A370449     if n == 0: return _one
%o A370449     # provide analytic expressions for the functions to integrate and the bounds of them
%o A370449     int_bounds = [_zero, *[1/(1 + C_analytic(L+1, n-L-2)/C_analytic(L, n-L-1)) for L in range(n-1)], _one]
%o A370449     int_polys = [sympy.poly(C_analytic(L, n-1-L) * _x**L * (1-_x)**(n-1-l), _x, domain="Q").integrate() for L in range(n)]
%o A370449     int_summands = [int_poly(R_bound)-int_poly(L_bound) for int_poly, (L_bound, R_bound) in zip(int_polys, rolling(int_bounds, 2))]
%o A370449     return sum(int_summands)
%o A370449 def A370449(n): return P_analytic(n).denominator
%Y A370449 Cf. A370448 (numerators).
%Y A370449 Cf. A370450, A370451.
%K A370449 frac,nonn,new
%O A370449 0,3
%A A370449 _Philip Geißler_, Feb 18 2024
