%I A260533 #20 Mar 14 2020 10:31:21
%S A260533 1,1,1,1,2,1,1,3,1,2,1,1,4,3,3,2,2,1,1,5,6,4,1,6,3,1,2,2,1,1,6,10,5,4,
%T A260533 12,4,3,3,6,3,2,2,2,1,1,7,15,6,10,20,5,1,12,6,12,4,3,3,6,6,3,1,2,2,2,1
%N A260533 Table of partition coefficients read by rows. The coefficient of a partition p is Product_{j=1..length(p)-1} C(p[j], p[j+1]). Row n lists the coefficients of the partitions of n in the ordering A080577, for n>=1.
%C A260533 The triangle is a refinement of Pascal's triangle A007318.
%F A260533 Let P = Partitions(n, k) denote the set of partitions p of n with largest part k. Then Sum_{p in P} PartitionCoefficient(p) = binomial(n-1,k-1) for n>=0 and k>=0 (assuming binomial(-1,-1) = 1).
%e A260533 The signed version of the triangle starts:
%e A260533 [1]
%e A260533 [-1, 1]
%e A260533 [1, -2, 1]
%e A260533 [-1, 3, -1, -2, 1]
%e A260533 [1, -4, 3, 3, -2, -2, 1]
%e A260533 [-1, 5, -6, -4, 1, 6, 3, -1, -2, -2, 1]
%e A260533 Adding adjacent coefficients with equal sign reduces the triangle to the matrix inverse of Pascal's triangle (A130595).
%p A260533 with(combstruct): with(ListTools):
%p A260533 PartitionCoefficients := proc(n) local L, iter, p;
%p A260533 iter := iterstructs(Partition(n)): L := []:
%p A260533 while not finished(iter) do
%p A260533    p := Reverse(nextstruct(iter)):
%p A260533    L := [mul(binomial(p[j], p[j+1]), j=1..nops(p)-1), op(L)]
%p A260533 od end:
%p A260533 for n from 1 to 6 do PartitionCoefficients(n) od;
%o A260533 (Sage)
%o A260533 PartitionCoeff = lambda p: mul(binomial(p[j], p[j+1]) for j in range(len(p)-1))
%o A260533 PartitionCoefficients = lambda n: [PartitionCoeff(p) for p in Partitions(n)]
%o A260533 for n in (1..7): print(PartitionCoefficients(n))
%Y A260533 Cf. A007318, A080577, A130595.
%K A260533 nonn,tabf
%O A260533 1,5
%A A260533 _Peter Luschny_, Jul 28 2015
