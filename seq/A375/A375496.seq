%I A375496 #34 Sep 29 2024 15:07:00
%S A375496 0,1,2,4,6,7,9,11,13,17,19,20,22,26,28,29,33,34,40,42,44,51,52,58,60,
%T A375496 61,63,67,78,79,85,87,88,90,92,100,101,103,117,119,121,127,128,132,
%U A375496 133,135,150,152,154,155,157,175,179,181,182,184,190,191,198,200,202,225,231,233,235
%N A375496 Nonnegative integers k which have a unique minimum length construction starting from 1 and choosing operations f(x) = 3x+1 or g(x) = floor(x/2).
%C A375496 A375495(k) is the number of ways to reach k by the minimum length construction and the present sequence is those k for which A375495(k) = 1.
%C A375496 This sequence is infinite, since k = f(f(f(...(1)))) (A003462) is always a unique minimum construction.
%C A375496 Experimentally, it is observed that many of the integers with unique smallest constructions have one or more g(x) steps in their construction and the position of those g(x) operations does not follow an obvious pattern; meaning that these unique constructions are complex and may be related to the complexity of the Hailstone sequences (A127933).
%e A375496 9 is a term since the shortest sequence of f and g to reach 9 (length A375494(9) = 5) is unique g(f(g(f(f(1))))) = 9.
%e A375496 Here are some of the unique, smallest constructions. All other positive integers smaller than 28 do not have unique, smallest constructions.
%e A375496 0 = g(1)
%e A375496 1 = 1
%e A375496 2 = g◦f(1)
%e A375496 4 = f(1)
%e A375496 6 = g◦f◦f(1)
%e A375496 7 = f◦g◦f(1)
%e A375496 9 = g◦f◦g◦f◦f(1)
%e A375496 11 = g◦f◦f◦g◦f(1)
%e A375496 13 = f◦f(1)
%e A375496 17 = g◦f◦g◦f◦f◦g◦f(1)
%e A375496 19 = f◦g◦f◦f(1)
%e A375496 20 = g◦f◦f◦f(1)
%e A375496 22 = f◦f◦g◦f(1)
%e A375496 26 = g◦f◦g◦f◦g◦f◦f◦g◦f(1)
%e A375496 28 = f◦g◦f◦g◦f◦f(1)
%o A375496 (Python)
%o A375496 from itertools import product
%o A375496 seq = [None for _ in range(200)]
%o A375496 num = [   0 for _ in range(len(seq))]
%o A375496 for L in range(0, 23):
%o A375496    for P in product((True, False), repeat=L):
%o A375496       x = 1
%o A375496       for upward in P:
%o A375496          x = 3*x+1 if upward else x//2
%o A375496       if x < len(seq):
%o A375496          if num[x] == 0 or L < seq[x]:
%o A375496             seq[x], num[x] = L, 1
%o A375496          elif L == seq[x]:
%o A375496             num[x] += 1
%o A375496 print(', '.join([str(i) for i,x in enumerate(num) if x==1]))
%Y A375496 Cf. A375494 (minimum steps), A375495 (ways attained).
%K A375496 nonn,new
%O A375496 0,3
%A A375496 _Russell Y. Webb_, Aug 31 2024
