%I A375467 #9 Aug 30 2024 04:38:35
%S A375467 0,0,1,0,0,1,0,0,1,2,0,0,1,3,4,0,0,1,5,8,9,0,0,1,7,15,19,20,0,0,1,11,
%T A375467 29,42,47,48,0,0,1,15,53,89,108,114,115,0,0,1,22,98,191,252,278,285,
%U A375467 286,0,0,1,30,177,402,582,676,710,718,719
%N A375467 Triangle read by rows: Number of rooted trees with n vertices where the level of a vertex is bounded by k.
%C A375467 The level of a vertex is the number of vertices in the path from the root to the vertex, the level of the root is 1.
%F A375467 The rows accumulate the rows of A034781.
%e A375467 Triangle starts:
%e A375467   [0] [0]
%e A375467   [1] [0, 1]
%e A375467   [2] [0, 0, 1]
%e A375467   [3] [0, 0, 1,  2]
%e A375467   [4] [0, 0, 1,  3,  4]
%e A375467   [5] [0, 0, 1,  5,  8,   9]
%e A375467   [6] [0, 0, 1,  7, 15,  19,  20]
%e A375467   [7] [0, 0, 1, 11, 29,  42,  47,  48]
%e A375467   [8] [0, 0, 1, 15, 53,  89, 108, 114, 115]
%e A375467   [9] [0, 0, 1, 22, 98, 191, 252, 278, 285, 286]
%o A375467 # Python
%o A375467 from functools import cache
%o A375467 @cache
%o A375467 def A375467(n: int, k: int) -> int:
%o A375467     if k >  n: return A375467(n, n)
%o A375467     if k <= 0: return 0
%o A375467     if n == 1: return 0 if k == 0 else 1
%o A375467     def W(n: int, k: int, u: int, w: int) -> int:
%o A375467        q, r = divmod(u, w)
%o A375467        if r != 0: return 0
%o A375467        return q * A375467(k, n) * A375467(q, n - 1)
%o A375467     return sum(sum(W(k, i, n - i, j)
%o A375467      for i in range(1, n)) for j in range(1, n)) // (n - 1)
%o A375467 for n in range(20):
%o A375467     print([A375467(n, k) for k in range(n + 1)])
%Y A375467 Cf. A000081 (main diagonal), A375468 (row sums), A034781.
%K A375467 nonn,tabl,new
%O A375467 0,10
%A A375467 _Peter Luschny_, Aug 29 2024
