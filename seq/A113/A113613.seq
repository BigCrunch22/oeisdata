%I A113613 #8 Aug 10 2022 07:40:26
%S A113613 7,17,5717,27175717,212717571727175717,
%T A113613 8717571727175717212717571727175717,
%U A113613 2327175717271757172127175717271757178717571727175717212717571727175717
%N A113613 Beginning with 7, distinct primes such that every partial concatenation is a palindrome.
%C A113613 From _Michael S. Branicky_, Aug 09 2022: (Start)
%C A113613 If terms were not required to be distinct, then 7, 7, 7, ... or 7, 17, 17, 17, ... satisfy the requirement.
%C A113613 a(11) has 1132 digits. (End)
%H A113613 Michael S. Branicky, <a href="/A113613/b113613.txt">Table of n, a(n) for n = 1..10</a>
%e A113613 7, 717, 7175717, 717571727175717, ... are all palindromes.
%o A113613 (Python)
%o A113613 from sympy import isprime
%o A113613 from itertools import count, islice, product
%o A113613 def pals(digs):
%o A113613     yield from digs
%o A113613     for d in count(2):
%o A113613         for p in product(digs, repeat=d//2):
%o A113613             left = "".join(p)
%o A113613             for mid in [[""], digs][d%2]:
%o A113613                 yield left + mid + left[::-1]
%o A113613 def folds(s): # generator of suffixes of palindromes starting with s
%o A113613     for i in range((len(s)+1)//2, len(s)+1):
%o A113613         for mid in [True, False]:
%o A113613             t = s[:i] + (s[:i-1][::-1] if mid else s[:i][::-1])
%o A113613             if t.startswith(s):
%o A113613                 yield t[len(s):]
%o A113613     yield from ("".join(p)+s[::-1] for p in pals("0123456789"))
%o A113613 def agen():
%o A113613     s, seen = "7", {"7"}; yield 7
%o A113613     while True:
%o A113613         for t in folds(s):
%o A113613             if len(t) and t[0] != "0" and t not in seen and isprime(int(t)):
%o A113613                 break
%o A113613         s += t; seen.add(t); yield int(t)
%o A113613 print(list(islice(agen(), 7))) # _Michael S. Branicky_, Aug 09 2022
%Y A113613 Cf. A113612.
%K A113613 base,nonn
%O A113613 1,1
%A A113613 _Amarnath Murthy_, Nov 09 2005
%E A113613 Name clarified and a(5) and beyond from _Michael S. Branicky_, Aug 09 2022
