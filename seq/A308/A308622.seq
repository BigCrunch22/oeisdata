%I A308622 #17 Aug 27 2019 17:49:52
%S A308622 1,1,1,2,2,2,2,3,2,2,4,3,2,3,5,3,3,4,5,3,3,5,5,3,4,6,5,4,5,7,5,4,6,7,
%T A308622 4,5,7,7,4,5,8,6,5,6,8,6,5,7,9,6,5,8,9,6,6,9,8,5,6,10,8,6,7,10,8,6,8,
%U A308622 10,7,6,9,10,7,6,10,10,7,7,11,10,7,7,11
%N A308622 a(n) = nearest integer to f(n), where f(0) = f(1) = 1, f(n) = (n-f(n-1))/f(n-2).
%C A308622 Comments from _Jon Maiga_, Aug 25 2019: (Start)
%C A308622 The function seems to follow the square root of n.
%C A308622 The first differences center around the x-axis with a similar look.
%C A308622 Changing the initial values to for example f(0)=1 and f(1)=3 creates a very different graph.
%C A308622 See the image for fractional versions with f(0)=f(1)=1 and f(0)=1, f(1)=3.
%C A308622 (End)
%H A308622 Robert Israel, <a href="/A308622/b308622.txt">Table of n, a(n) for n = 0..10000</a>
%H A308622 J. Maiga, <a href="http://jonkagstrom.com/look/index.html">A few good looking recursive functions</a>, 2019.
%H A308622 Jon Maiga, <a href="/A308622/a308622.png">Plots of f(n) for n up to 1000</a>
%p A308622 L[0]:= 1: R[0]:= 1: A[0]:= 1:
%p A308622 L[1]:= 1: R[1]:= 1: A[1]:= 1:
%p A308622 for n from 2 to 100 do
%p A308622   x:= (n - R[n-1])/R[n-2];
%p A308622   y:= (n - L[n-1])/L[n-2];
%p A308622   L[n]:= 10^(-100)*floor(x*10^100);
%p A308622   R[n]:= 10^(-100)*ceil(y*10^100);
%p A308622   if round(L[n]) <> round(R[n]) then printf("Oops: %d \n",n); break fi;
%p A308622   A[n]:= round(L[n])
%p A308622 od:
%p A308622 seq(A[n],n=0..100); # _Robert Israel_, Aug 24 2019
%t A308622 f[0] = f[1] = 1;
%t A308622 f[n_] := f[n] = N[(n - f[n - 1])/f[n - 2]]
%t A308622 Round[Array[f, 83, 0]]
%K A308622 nonn,look
%O A308622 0,4
%A A308622 _Jon Maiga_, Jun 11 2019
