%I A167939 #16 Nov 23 2016 16:15:32
%S A167939 1,3,10,64,973,31743,2069970,267270040,68629753649,35171000942707,
%T A167939 36024807353574290,73784587576805254664,302228602363365451957805,
%U A167939 2475873310144021668263093215,40564787336902311168400640561098,1329227697997490307154018925966130320
%N A167939 The number of connected subgraphs of the complete graph with n nodes.
%C A167939 The problem originated from Attila Szabss.
%F A167939 E.g.f.: exp(x)*log(A(x)) where A(x) is the e.g.f. for A006125. - _Geoffrey Critzer_, Nov 23 2016
%e A167939 For n = 3, consider the complete graph with nodes A, B and C. a(3) = 10, the 10 connected subgraphs being: A, B, C, AB, AC, BC, AB+AC, AB+BC, AC+BC, AB+AC+BC.
%t A167939 nn = 25; g[z_] := Sum[2^Binomial[n, 2] z^n/n!, {n, 0, nn}]; Drop[Range[0, nn]! CoefficientList[Series[Exp[z] Log[g[z]], {z, 0, nn}],z], 1] (* _Geoffrey Critzer_, Nov 23 2016 *)
%o A167939 (Haskell)
%o A167939 import Data.Function (fix)
%o A167939 import Data.List (transpose)
%o A167939 a :: [Integer]
%o A167939 a = scanl1 (+) . (!! 1) . transpose . fix $ map ((1:) . zipWith (*) (scanl1 (*) l) . zipWith poly (scanl1 (+) l)) . scanl (flip (:)) [] . zipWith (zipWith (*)) pascal where l = iterate (2*) 1
%o A167939 -- the Pascal triangle
%o A167939 pascal :: [[Integer]]
%o A167939 pascal = iterate (\l -> zipWith (+) (0: l) l) (1: repeat 0)
%o A167939 -- evaluate a polynomial at a given value
%o A167939 poly :: (Num a) => a -> [a] -> a
%o A167939 poly t = foldr (\e i -> e + t*i) 0
%Y A167939 Cf. A006125, A006896.
%K A167939 nonn
%O A167939 1,2
%A A167939 Peter Divianszky (divip(AT)aszt.inf.elte.hu), Nov 15 2009
