%I A292948 #22 Oct 23 2018 19:18:10
%S A292948 1,1,-1,1,1,2,1,0,-1,-5,1,0,1,-2,15,1,0,0,-3,9,-52,1,0,0,1,9,-4,203,1,
%T A292948 0,0,0,-4,-40,-95,-877,1,0,0,0,1,10,210,414,4140,1,0,0,0,0,-5,-10,
%U A292948 -1176,49,-21147,1,0,0,0,0,1,15,-105,7273,-10088,115975,1,0,0
%N A292948 Square array A(n,k), n>=0, k>=0, read by antidiagonals, where A(0,k) = 1 and A(n,k) = (-1)^(k+1) * Sum_{i=0..n-1} (-1)^i * binomial(n-1,i) * binomial(i+1,k) * A(n-1-i,k) for n > 0.
%H A292948 Seiichi Manyama, <a href="/A292948/b292948.txt">Antidiagonals n = 0..139, flattened</a>
%e A292948 Square array begins:
%e A292948     1,  1,  1,  1, 1, ...
%e A292948    -1,  1,  0,  0, 0, ...
%e A292948     2, -1,  1,  0, 0, ...
%e A292948    -5, -2, -3,  1, 0, ...
%e A292948    15,  9,  9, -4, 1, ...
%o A292948 (Ruby)
%o A292948 def ncr(n, r)
%o A292948   return 1 if r == 0
%o A292948   (n - r + 1..n).inject(:*) / (1..r).inject(:*)
%o A292948 end
%o A292948 def A(k, n)
%o A292948   ary = [1]
%o A292948   (1..n).each{|i| ary << (-1) ** (k % 2 + 1) * (0..i - 1).inject(0){|s, j| s + (-1) ** (j % 2) * ncr(i - 1, j) * ncr(j + 1, k) * ary[i - 1 - j]}}
%o A292948   ary
%o A292948 end
%o A292948 def A292948(n)
%o A292948   a = []
%o A292948   (0..n).each{|i| a << A(i, n - i)}
%o A292948   ary = []
%o A292948   (0..n).each{|i|
%o A292948     (0..i).each{|j|
%o A292948       ary << a[i - j][j]
%o A292948     }
%o A292948   }
%o A292948   ary
%o A292948 end
%o A292948 p A292948(20)
%Y A292948 Columns k=0-5 give: A292935, A003725, A292909, A292910, A292912, A292950.
%Y A292948 Rows n=0 gives A000012.
%Y A292948 Main diagonal gives A000012.
%Y A292948 Cf. A145460.
%K A292948 sign,tabl,look
%O A292948 0,6
%A A292948 _Seiichi Manyama_, Sep 27 2017
