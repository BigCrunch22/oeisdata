%I A035237 #23 Dec 16 2020 08:48:43
%S A035237 2,0,10,49,100,1000,1441,4900,11449,104900,144100,490000,1440000,
%T A035237 1144900,11144900,16810000,114490049,156250000,114490000,1114490000,
%U A035237 1681000000
%N A035237 Smallest number that has exactly n substrings which are square.
%C A035237 No leading 0's allowed in substrings, except for the number 0.
%C A035237 a(15+5k+j) <= 1681*10^(4+2k+j) for j = 0, 1.  In particular, a(21) <= 16810000000. Similar upper bounds can be derived using numbers of the form 49*10^k, 144*10^k, 1149*10^k, etc. - _Michael S. Branicky_, Dec 15 2020
%e A035237 a(3)=49 since 4, 9 and 49 are squares and no smaller number works.
%o A035237 (Python)
%o A035237 LIMIT = 10**7
%o A035237 ss = set(str(i*i) for i in range(int(LIMIT**.5)+2))
%o A035237 def num_square_substrings(s):
%o A035237   return sum(s[i:j] in ss for i in range(len(s)) for j in range(i+1, len(s)+1))
%o A035237 def agen():
%o A035237   n, k, data = 0, 0, dict()
%o A035237   while True:
%o A035237     if n in data: yield data[n]; n += 1; continue
%o A035237     while True:
%o A035237       if k > LIMIT: assert False, "LIMIT exceeded"
%o A035237       nss = num_square_substrings(str(k))
%o A035237       if nss == n: data[n] = k; yield k; break
%o A035237       elif nss > n:
%o A035237         if nss not in data: data[nss] = k
%o A035237       k += 1
%o A035237     n += 1
%o A035237 g = agen()
%o A035237 for i in range(13): print(next(g)) # _Michael S. Branicky_, Dec 15 2020
%Y A035237 Cf. A035222.
%K A035237 nonn,base,more
%O A035237 0,1
%A A035237 _Erich Friedman_
%E A035237 a(0) corrected, a(8)-a(14) added, and title made more specific by _Sean A. Irvine_, Oct 01 2020
%E A035237 a(15)-a(20) from _Michael S. Branicky_, Dec 15 2020
