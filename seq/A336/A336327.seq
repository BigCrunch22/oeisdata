%I A336327 #35 Jan 08 2021 20:30:22
%S A336327 0,4,0,4450,0,4450,0,0,0,4450,0,0,6,0,0,4450,0,0,0,0,910,4450,0,4450,
%T A336327 910,4450,0,4450,0,4450,910,0,0,4450,0,4450,910,4,0,4,0,0,910,0,6,0,
%U A336327 910,0,0,4450,0,4450,910,4450,0,292,0,4450,0,0,910,4450,6,4450
%N A336327 Period of orbit of Post's tag system ({0,1},{(0,0),(1,01101)},3,100^n).
%C A336327 In general a tag as defined by Emil Leon Post, is given by a 4-tuple (Sigma,AF,n,w0), where Sigma is some (nonempty) set of symbols called the alphabet, AF is the associated function (sometimes also called set of production rules) AF: Sigma -> Sigma*, n is the deletion number and w0 the initial string.
%C A336327 From the starting sequence we obtain a new string in each step by adjoining the string associated to the prefix symbol of the string, where after the prefix n symbols are removed from the string.
%C A336327 The decision problem is: will the tag end up in an empty string, a(n) = 0 or not, a(n) <> 0?
%C A336327 a(n) is an even number. Proof: for each cycle the number of associations (productions) 0 -> 0 must equal the number of associations (productions) 1 -> 01101 applied within a cycle.
%C A336327 For n=85 the tag is hard to solve by a brute force method, similar to the tag for n=110 with associated function {(0,00),(1,1101)} as reported in A284119.
%C A336327 Also period of orbit of Post's tag system ({0,1},{(0,0),(0,11010)},3,100^(n-1)).
%H A336327 Emil L. Post, <a href="http://www.lib.ysu.am/articles_art/63062f3ed126193beb426becc0fbbe33.pdf">Formal reductions of the general combinatorial decision problem</a>, American Journal of Mathematics, Vol. 65, No. 2 (Apr., 1943), pp. 197-215.
%H A336327 Eric Weisstein's World of Mathematics, <a href="http://mathworld.wolfram.com/TagSystem.html">Tag System</a>
%F A336327 Observed: if n is even then a(n) in {0, 4, 292, 4450}, if n is odd then a(n) in {0, 6, 910}.
%o A336327 (Python)
%o A336327 def step(w):
%o A336327     i = 0
%o A336327     while w[0] != alfabet[i]:
%o A336327         i = i+1
%o A336327     w = w+suffix[i]
%o A336327     return w[n:len(w)]
%o A336327 alfabet, suffix, n, ws, w0, m = "01", ["0", "01101"], 3, "100", "", 0
%o A336327 while m >= 0:
%o A336327     w0, m = w0+ws, m+1
%o A336327     w, ww, i, a = w0, w0, 0, 0
%o A336327     while w != "" and a == 0:
%o A336327         w, i = step(w), i+1
%o A336327         if i%100000 == 0:
%o A336327             ww = w
%o A336327         else:
%o A336327             if w == ww or w == "":
%o A336327                 if w != "":
%o A336327                     a = i%100000
%o A336327                 print(m, a)
%Y A336327 Cf. A284119, A291793, A292091, A336287.
%K A336327 nonn
%O A336327 1,2
%A A336327 _A.H.M. Smeets_, Jul 17 2020
