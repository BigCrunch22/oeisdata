%I A269455 #41 May 01 2021 15:57:35
%S A269455 1,3,15,105,2295,75735,4922775,625192425,163204759575,83724041661975,
%T A269455 85817142703524375,175667691114114395625,720413716161839357604375,
%U A269455 5902349576513949856852644375,96709997811181068404530578084375,3168896498278970068411253452090715625,207692645973961964120828372930661061284375,27222898185745116523209337325140537285726884375,7136346644902153570976711733098966146766874104484375,3741493773415815389266667264411257664189964123617799515625
%N A269455 Number of Type I (singly-even) self-dual binary codes of length 2n.
%C A269455 A self dual binary linear code is either Type I (singly even) or Type II (doubly even).  A self dual binary linear code can only be Type II if the length of the code (2n) is a multiple of 8. The total number self dual binary linear codes (including equivalent codes) is equal to the number of Type I self dual binary linear codes (including equivalent codes) when the length (2n) is not a multiple of 8.  If the length is a multiple of 8 ( 2n =0 mod 8 ) then the total number of  Type I codes is the number of type II codes subtracted from the total number of self dual codes of length 2n.
%D A269455 W. Cary Huffman and Vera Pless, Fundamentals of Error Correcting Codes, 2003, Page 366.
%D A269455 F. J. MacWilliams and N. J. A. Sloane, The Theory of Error-Correcting Codes, Elsevier/North Holland, 1977.
%H A269455 Nathan J. Russell, <a href="/A269455/b269455.txt">Table of n, a(n) for n = 1..49</a>
%H A269455 G. Nebe, E. M. Rains and N. J. A. Sloane, <a href="http://neilsloane.com/doc/cliff2.html">Self-Dual Codes and Invariant Theory</a>, Springer, Berlin, 2006.
%H A269455 P. Gaborit, <a href="http://www.unilim.fr/pages_perso/philippe.gaborit/SD/">Tables of Self-Dual Codes</a>
%H A269455 E. M. Rains and N. J. A. Sloane, Self-dual codes, pp. 177-294 of Handbook of Coding Theory, Elsevier, 1998; (<a href="http://neilsloane.com/doc/self.txt">Abstract</a>, <a href="http://neilsloane.com/doc/self.pdf">pdf</a>, <a href="http://neilsloane.com/doc/self.ps">ps</a>).
%F A269455 From _Nathan J. Russell_, Mar 01 2016: (Start)
%F A269455 If 2n = 0 MOD 8 then a(n) = prod_(2^i+1, i=1,...,n-1) - prod_(2^i+1, i=0,...,n-2);
%F A269455 If 2n != 0 MOD 8 then a(n) = prod_(2^i+1, i=1,...,n-1).
%F A269455 If 2n = 0 MOD 8 then a(n) = A028362(n) - A028363( n/8);
%F A269455 If 2n != 0 MOD 8 then a(n) = A028362(n).
%F A269455 (End)
%t A269455 Table[
%t A269455 If[Mod[2 n, 8] == 0,
%t A269455   Product[2^i + 1, {i, 1, n - 1}] - Product[2^i + 1, {i, 0, n - 2}] ,
%t A269455   Product[2^i + 1, {i, 1, n - 1}]],
%t A269455 {n, 1, 10}] (* _Nathan J. Russell_, Mar 01 2016 *)
%o A269455 (Python)
%o A269455 for n in range(1,10):
%o A269455     product1 = 1
%o A269455     for i in range(1,n-1 + 1):
%o A269455         product1 *= (2**i+1)
%o A269455     if (2*n)%8 == 0:
%o A269455         product2 = 1
%o A269455         for i in range(n-2 + 1):
%o A269455             product2 *= (2**i+1)
%o A269455         print(product1 - product2)
%o A269455     else:
%o A269455         print(product1)
%o A269455 (PARI) a(n) = if (2*n%8==0, prod(i=1, n-1, 2^i+1)-prod(i=0, n-2, 2^i+1), prod(i=1, n-1, 2^i+1))
%o A269455 vector(20, n, a(n)) \\ _Colin Barker_, Feb 28 2016
%Y A269455 Cf. A003178, A003179, A028363, A028361.
%K A269455 nonn
%O A269455 1,2
%A A269455 _Nathan J. Russell_, Feb 27 2016
%E A269455 a(20) corrected by _Andrew Howroyd_, Feb 22 2018
