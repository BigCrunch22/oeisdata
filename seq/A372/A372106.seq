%I A372106 #43 Apr 22 2024 13:50:49
%S A372106 1476395008,116508327936,505627938816,640532803911,1207460451879,
%T A372106 1429150367744,1458956660623,3292564845031,3820372951296,
%U A372106 5056734498816,6784304541696,8090702381056,9095331446784,10757095489536,10973607685048,13505488366293,14913065975808,38203732951296
%N A372106 A370972 terms composed of nine distinct digits which may repeat.
%C A372106 Each factorization is necessarily composed of multipliers that use only the single missing digit.
%C A372106 The single missing digit cannot be 0, 1, 5, or 6. Terms missing 2, 3, 4, 7, and 8 appear within a(1)-a(6). 52612606387341 = 9^6 * 99 * 999999 is an example of a term missing 9. - _Michael S. Branicky_, Apr 18 2024
%C A372106 Some terms are equal to the sum of two distinct smaller terms:
%C A372106 a(741) = a(635) + a(673)
%C A372106 a(1202) = a(1081) + a(1144)
%C A372106 a(1273) = a(1110) + a(1169)
%C A372106 a(1493) = a(1335) + a(1374)
%C A372106 a(2753) = a(2478) + a(2528)
%C A372106 a(2793) = a(2512) + a(2583)
%C A372106 a(3581) = a(3234) + a(3317)
%C A372106 a(4199) = a(3808) + a(3921)
%C A372106 a(4803) = a(4510) + a(4607) = a(4557) + a(4568)
%C A372106 a(5756) = a(5256) + a(5362)
%C A372106 a(6083) = a(5718) + a(5847)
%C A372106 a(7262) = a(6761) + a(6779)
%C A372106 a(7331) = a(6786) + a(6904)
%C A372106 a(9204) = a(8723) + a(8886)
%C A372106 a(9364) = a(8858) + a(8982)
%C A372106 a(9453) = a(8972) + a(8983) - _Hans Havermann_, Apr 21 2024
%H A372106 Michael S. Branicky, <a href="/A372106/b372106.txt">Table of n, a(n) for n = 1..10000</a> (terms 1..1016 from Hans Havermann)
%H A372106 Michael S. Branicky and Hans Havermann, <a href="/A372106/a372106.txt">Table of n, a(n) for n = 1..10000, fully factored</a>
%e A372106 10973607685048 = 22222*22222*22222 is in the sequence because it has nine distinct digits and may be factored using only its missing digit.
%o A372106 (Python)
%o A372106 import heapq
%o A372106 from itertools import islice
%o A372106 def agen(): # generator of terms
%o A372106     allowed = [2, 3, 4, 7, 8, 9]
%o A372106     v, oldt, h, repunits, bigr = 1, 0, list((d, d) for d in allowed), [1], 1
%o A372106     while True:
%o A372106         v, d = heapq.heappop(h)
%o A372106         if (v, d) != oldt:
%o A372106             s = set(str(v))
%o A372106             if len(s) == 9 and str(d) not in s:
%o A372106                 yield v
%o A372106             oldt = (v, d)
%o A372106             while v > bigr:
%o A372106                 bigr = 10*bigr + 1
%o A372106                 repunits.append(bigr)
%o A372106                 for c in allowed:
%o A372106                     heapq.heappush(h, (bigr*c, c))
%o A372106             for r in repunits:
%o A372106                 heapq.heappush(h, (v*d*r, d))
%o A372106 print(list(islice(agen(), 100))) # _Michael S. Branicky_, Apr 19 2024
%Y A372106 Cf. A370970, A370972.
%K A372106 nonn,base,changed
%O A372106 1,1
%A A372106 _Hans Havermann_, Apr 18 2024
