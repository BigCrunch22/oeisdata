%I A263308 #52 Dec 07 2019 12:18:28
%S A263308 2,5,13,41,71,97,491,0,523,1181,947,769,0,1709,1291,1217,4013,2521,
%T A263308 1901,2801,1933,3257,3221,4129,3701,4889,5563,8849,6323,5521,6263,
%U A263308 5441,8779,7481,7841,10009,13469,12161,8971,14561,13367,19993,14621,12497,14401,14537,20117,18913,22541,22901,19687,29537
%N A263308 Smallest prime modulus p such that there exists a multiplicative-coset Ramsey algebra in n colors over Z/pZ, or 0 if no such prime exists.
%C A263308 a(8) = 0 means there is NO prime satisfying the condition. a(n) is known for 1 <= n <= 2000.
%H A263308 Jeremy F. Alm, <a href="/A263308/b263308.txt">Table of n, a(n) for n = 1..2000</a>
%H A263308 Jeremy F. Alm and Jacob Manske, <a href="http://dx.doi.org/10.1016/j.dam.2014.08.002">Sum-free cyclic multi-bases and constructions of Ramsey algebras</a>, Discrete Applied Mathematics, (180), Jan 10 2015, pp. 204-212. (<a href="http://arxiv.org/abs/1307.0889">arXiv:1307.0889</a> [math.CO], 2013-2014.)
%H A263308 Jeremy F. Alm, <a href="https://cs.uwaterloo.ca/journals/JIS/VOL20/Alm/alm.html">401 and beyond: improved bounds and algorithms for the Ramsey algebra search</a>, Journal of Integer Sequences, Vol. 20 (2017), Article 17.8.4. (Also here: <a href="https://arxiv.org/abs/1609.01817">arXiv:1609.01817</a>  [math.NT], 2016.)
%H A263308 Tomasz Kowalski, <a href="http://dx.doi.org/10.1007/s00012-015-0353-0">Representability of Ramsey Relation Algebras</a>, Algebra Universalis, Volume 74, Issue 3-4, November 2015, pp. 265-275.
%o A263308 (Python)
%o A263308 import numpy as np
%o A263308 import itertools
%o A263308 from copy import copy
%o A263308 from sympy.ntheory.residue_ntheory import primitive_root
%o A263308 def psieve():
%o A263308     for n in [2, 3, 5, 7]:
%o A263308         yield n
%o A263308     D = {}
%o A263308     ps = psieve()
%o A263308     next(ps)
%o A263308     p = next(ps)
%o A263308     assert p == 3
%o A263308     psq = p*p
%o A263308     for i in itertools.count(9, 2):
%o A263308         if i in D:
%o A263308             step = D.pop(i)
%o A263308         elif i < psq:
%o A263308             yield i
%o A263308             continue
%o A263308         else:
%o A263308             assert i == psq
%o A263308             step = 2*p
%o A263308             p = next(ps)
%o A263308             psq = p*p
%o A263308         i += step
%o A263308         while i in D:
%o A263308             i += step
%o A263308         D[i] = step
%o A263308 def check_p_m_v6(p,m,g):
%o A263308     ''' checks a prime p with primitive root g for m colors '''
%o A263308 X0 = np.array( [pow(g, i, p) for i in range(0, p-m, m) ] )
%o A263308 certificates = np.array([ pow(g, i, p) for i in range(m) ])
%o A263308     C_minus_X0 = ( ( certificates[:, np.newaxis] - X0 ) % p )
%o A263308     C_minus_X0_sets = [ set(L) for L in C_minus_X0 ]
%o A263308 for i in range(m):
%o A263308 Xi = {pow(g, x+i, p) for x in range(0, p-m, m)}
%o A263308 for j in range(i,m):
%o A263308             if bool(Xi.intersection(C_minus_X0_sets[j])) == bool(j == 0):
%o A263308                 return False
%o A263308     return True
%o A263308 def main(mikelist):
%o A263308     ''' Accepts a list of m's, checks all candidate primes until it finds one that works.
%o A263308         Will NOT terminate for m=8 or m=13 '''
%o A263308     lget = primitive_root     ### GIVE FUNCTIONS LOCAL NAMES ###
%o A263308     lcheck = check_p_m_v6
%o A263308     with open("401output.csv", 'a') as file:
%o A263308         for mike in mikelist:
%o A263308             primes = psieve()
%o A263308             prime = next(primes)
%o A263308             while prime < 2*mike**2 - 4*mike:
%o A263308                 prime = next(primes)
%o A263308             while True:
%o A263308                 if (prime-1)/2 % mike == 0:
%o A263308                     gen = lget(prime)
%o A263308                     p_out = lcheck(prime, mike, gen)
%o A263308                     if p_out == True:
%o A263308                         print mike, prime, gen
%o A263308                         file.write(str(mike) + ', ' + str(prime) + ', ' + str(gen) + '\n')
%o A263308                         break
%o A263308                 prime = next(primes)
%o A263308 mrange = range(2,8) + range(9,13) + range(14,101)  # a good place to start
%o A263308 main(mrange)
%K A263308 nonn
%O A263308 1,1
%A A263308 _Jeremy F. Alm_, Oct 13 2015
%E A263308 More terms from _Jeremy F. Alm_, Sep 05 2016
