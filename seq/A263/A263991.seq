%I A263991 #17 Jan 13 2016 16:41:46
%S A263991 1,2,2,4,4,4,2,8,8,8,6,8,4,4,2,16,16,16,14,16,12,12,10,16,8,8,6,8,4,4,
%T A263991 2,32,32,32,30,32,28,28,26,32,24,24,22,24,20,20,18,32,16,16,14,16,12,
%U A263991 12,10,16,8,8,6,8,4,4,2,64,64,64,62,64,60,60,58,64,56,56,54,56,52,52,50,64,48,48,46,48,44,44,42,48,40,40,38,40,36,36,34,64,32,32,30
%N A263991 a(n) is the number of uniform consecutive subintervals of the unit interval each of size 2^(-ceiling(log_2(n))) that are completely covered by one of the n uniform consecutive subintervals (of size 1/n each) of the unit interval.
%C A263991 For n > 1, we know that 2 <= a(n) <= n. The lower bound of 2 is because [0, 2^(-ceiling(log_2(n)))] will always be covered by [0, 1/n] and [1 - 2^(-ceiling(log_2(n))), 1] will always be covered by [1 - 1/n, 1]. The upper bound of n is because each of the n consecutive subintervals (of size 1/n each) can only completely cover up to 1 of the 2^(ceiling(log_2(n))) consecutive subintervals (of size 2^(-ceiling(log_2(n))) each). In the case that n is a power of 2, a(n) = n.
%e A263991 For n=5, the 4 solutions are these intervals: [0, 1/8] is covered completely by [0, 1/5], [1/4, 3/8] is covered completely by [1/5, 2/5], [5/8, 3/4] is covered completely by [3/5, 4/5], and [7/8, 1] is covered completely by [4/5, 1].
%o A263991 (Python)
%o A263991 def getNumber(n):
%o A263991     y = int(math.ceil(math.log(n, 2)))
%o A263991     smallIncrement = 0.5 ** y
%o A263991     marker = 0
%o A263991     nMarker = 0
%o A263991     toReturn = 0
%o A263991     while marker < 1:
%o A263991         newMarker = marker + smallIncrement
%o A263991         if (nMarker + 1) / n < newMarker:
%o A263991             nMarker += 1
%o A263991         if nMarker / n <= marker and (nMarker + 1) / n >= newMarker:
%o A263991             toReturn += 1
%o A263991         marker = newMarker
%o A263991     return toReturn
%Y A263991 Cf. A029837, A062383.
%K A263991 nonn
%O A263991 1,2
%A A263991 _Apoorv Khandelwal_, Oct 31 2015
