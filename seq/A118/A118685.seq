%I A118685 #20 Oct 28 2015 04:54:36
%S A118685 0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,0,1,0,0,1,1,
%T A118685 0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,1,0,1,0,0,0,1,
%U A118685 0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0
%N A118685 Signs of entries in the multiplication table for hypercomplex numbers with Cayley-Dickson construction (by antidiagonals).
%C A118685 The signs in the second line of the table give the Thue-Morse sequence (A010060).
%H A118685 Joerg Arndt, <a href="http://www.jjj.de/fxt/#fxtbook">Matters Computational (The Fxtbook)</a>, section 39.14.1 "The Cayley-Dickson construction", pp.815-818
%H A118685 Joerg Arndt, <a href="http://www.jjj.de/fxt/demo/arith/#cayley-dickson">Demo program</a>
%H A118685 John C. Baez, <a href="http://math.ucr.edu/home/baez/octonions/">The Octonions</a>, Bull. Amer. Math. Soc., 39 (2002), 145-205.
%e A118685 Multiplication table for the octonions:
%e A118685 Let e0,e1,...e7 be the units.
%e A118685 The third entry in the second row is 3+, meaning that e1*e2==+e3.
%e A118685 The product is anti-commutative unless one factor is e0.
%e A118685 0 1 2 3 4 5 6 7
%e A118685 0: 0+ 1+ 2+ 3+ 4+ 5+ 6+ 7+
%e A118685 1: 1+ 0- 3- 2+ 5- 4+ 7+ 6-
%e A118685 2: 2+ 3+ 0- 1- 6- 7- 4+ 5+
%e A118685 3: 3+ 2- 1+ 0- 7- 6+ 5- 4+
%e A118685 4: 4+ 5+ 6+ 7+ 0- 1- 2- 3-
%e A118685 5: 5+ 4- 7+ 6- 1+ 0- 3+ 2-
%e A118685 6: 6+ 7- 4- 5+ 2+ 3- 0- 1+
%e A118685 7: 7+ 6+ 5- 4- 3+ 2+ 1- 0-
%e A118685 For the multiplication er*ec = +-ep we have p = r XOR c
%e A118685 The sign is given in the following array:
%e A118685 0 1 2 3 4 5 6 7
%e A118685 0: + + + + + + + +
%e A118685 1: + - - + - + + -
%e A118685 2: + + - - - - + +
%e A118685 3: + - + - - + - +
%e A118685 4: + + + + - - - -
%e A118685 5: + - + - + - + -
%e A118685 6: + - - + + - - +
%e A118685 7: + + - - + + - -
%e A118685 Now replace all + by 0 and all - by 1.
%e A118685 Read by antidiagonals (rising order) to obtain the sequence.
%e A118685 Cayley-Dickson construction:
%e A118685 Multiplication rule is
%e A118685 (a,b)*(A,b) = (a*A - B*conj(b), conj(a)*B + A*b)
%e A118685 where conj(a,b) := (conj(a), -b) and conj(x):=x for x real
%e A118685 [ Transposed rule/table is obtained if rule is changed to
%e A118685 (a,b)*(A,b) = (a*A - conj(B)*b, b*conj(A) + B*a) ]
%o A118685 /* C++ (returns +1 or -1) */
%o A118685 void cp2(ulong a, ulong b, ulong &u, ulong &v) { u=a; v=b; } /* auxiliary func. */
%o A118685 int CD_sign(ulong r, ulong c, ulong n)
%o A118685 {
%o A118685   int s = +1;
%o A118685   while ( true )
%o A118685   {
%o A118685       if ( (r==0) || (c==0) )  return s;
%o A118685       if ( c==r )  return -s;
%o A118685       if ( c>r )   { swap2(r,c); s=-s; }
%o A118685       n >>= 1;
%o A118685       if ( c>=n )  cp2(c-n, r-n, r, c);
%o A118685       else if ( r>=n )  cp2(c, r-n, r, c);
%o A118685   }
%o A118685 }
%o A118685 /* Note: the function void swap2(ulong &x, ulong &y) shall swap its arguments */
%Y A118685 Cf. A096809, A010060.
%K A118685 nonn,tabl
%O A118685 0,1
%A A118685 _Joerg Arndt_, May 20 2006
