%I A331164 #49 Mar 11 2020 01:57:42
%S A331164 1,1,1,3,6,5,9,8,11,10,14,13,16,13,19,15,18,15,22,18,21,18,24,20,23,
%T A331164 20,27,23,26,23,29,22,25,22,32,26,29,26,32,25,28,25,34,28,31,28,34,27,
%U A331164 30,27,37,31,34,31,37,30,33,30,39,33,36,33,39
%N A331164 Number of function evaluations when recursively calculating Fibonacci(n) with caching.
%C A331164 One way to calculate the Fibonacci numbers recursively is to use:
%C A331164 F(0) = 0, F(1) = 1, F(2) = 1,
%C A331164 F(n) = F((n + 1)/2)^2 + F((n - 1)/2)^2 for odd n,
%C A331164 F(n) = F(n/2) * (F(n/2 - 1) + F(n/2 + 1)) for even n.
%C A331164 Proof: It is known that F(i) * F(j) + F(i + 1) * F(j + 1) = F(i + j + 1) (see formula section of A000045).
%C A331164 For even n, let i = n/2 and j = n/2 - 1, for odd n, let i = j = (n + 1)/2.
%C A331164 This table gives the number of evaluations of F for calculating F(n). It is assumed that values of F which have been previously calculated are available; looking up a previously calculated value counts as a function evaluation.
%C A331164 a(0) = 1, a(1) = 1, a(2) = 1,
%C A331164 if (a(n)) has not been previously calculated then
%C A331164     a(n) = a((n + 1)/2) + a((n - 1)/2) + 1, n odd,
%C A331164     a(n) = a(n/2) + a(n/2 - 1) + a(n/2 + 1) + 1, n even,
%C A331164 else
%C A331164     a(n) = 1.
%C A331164 Conjecture: a(n) is O(log n).
%H A331164 Thomas König, <a href="/A331164/b331164.txt">Table of n, a(n) for n = 0..10000</a>
%H A331164 Thomas König, <a href="/A331164/a331164.f90.txt">Calculation of Fibonacci numbers</a>, Fortran program including operation counts.
%H A331164 Thomas König, <a href="/A331164/a331164.png">Graph for calculating F(10) with different ordering of the calls.</a>
%e A331164 Calculation of F(15) = 15:
%e A331164 Level of recursion is marked with indentation and "level", so calculating F(15) (level 1) calls F(8) (level 2), which calls F(5) (level 3) etc... until a cached value is reached.
%e A331164 F(15) level 1
%e A331164   F(8) level 2
%e A331164     F(5) level 3
%e A331164       F(3) level 4
%e A331164         F(2) level 5 cached
%e A331164         F(1) level 5 cached
%e A331164       F(2) level 4 cached
%e A331164     F(4) level 3
%e A331164       F(3) level 4 cached
%e A331164       F(2) level 4 cached
%e A331164       F(1) level 4 cached
%e A331164     F(3) level 3 cached
%e A331164   F(7) level 2
%e A331164     F(4) level 3 cached
%e A331164     F(3) level 3 cached
%o A331164 (Fortran) program main
%o A331164   implicit none
%o A331164   integer, parameter :: pmax = 100000
%o A331164   integer :: r, n
%o A331164   logical, dimension(0:pmax) :: cache
%o A331164   do n=0, pmax
%o A331164      cache (0:2) = .true.
%o A331164      cache (3:pmax) = .false.
%o A331164      r = a(n)
%o A331164      write (*,fmt="(I0,', ')", advance="no") r
%o A331164   end do
%o A331164   write (*,fmt="()")
%o A331164 contains
%o A331164   recursive function a (n) result(r)
%o A331164     integer, intent(in) :: n
%o A331164     integer :: r
%o A331164     if (cache(n)) then
%o A331164        r = 1
%o A331164        return
%o A331164     else if (mod(n,2) == 1) then
%o A331164        r = a ((n+1)/2) + a ((n-1)/2) + 1
%o A331164     else
%o A331164        r =  a(n/2+1) + a (n/2) + a(n/2-1) + 1
%o A331164     end if
%o A331164     cache (n) = .true.
%o A331164   end function a
%o A331164 end program main
%Y A331164 Cf. A000045; see A331124 for the number of evaluations without caching.
%K A331164 nonn,easy,hear
%O A331164 0,4
%A A331164 _Thomas König_, Jan 11 2020
