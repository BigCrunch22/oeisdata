%I A331124 #43 Mar 06 2020 06:34:19
%S A331124 1,1,1,3,6,5,11,10,15,12,23,17,27,22,37,26,38,28,51,36,53,41,68,45,67,
%T A331124 50,87,60,86,64,102,65,93,67,118,80,116,88,141,90,131,95,163,110,155,
%U A331124 114,181,113,163,118,205,138,198,148,234,147,211,151,253,167
%N A331124 Number of function evaluations in a recursive calculation of Fibonacci(n).
%C A331124 One way to calculate the Fibonacci numbers recursively is to use:
%C A331124 - F(0) = 0,
%C A331124 - F(1) = 1,
%C A331124 - F(2) = 1,
%C A331124 - F(n) = F((n + 1)/2)^2 + F((n - 1)/2)^2 for odd n,
%C A331124 - F(n) = F(n/2) * (F(n/2 - 1) + F(n/2 + 1)) for even n.
%C A331124 Proof: it is known that F(i) * F(j) + F(i + 1) * F(j + 1) = F(i + j + 1) (see formula section of A000045):
%C A331124 - for even n, let i = n/2 and j = n/2 - 1,
%C A331124 - for odd n, let i = j = (n + 1)/2.
%C A331124 This sequence gives the number of evaluations of F for calculating F(n). It is assumed that F needs to be evaluated more than once even if it has been evaluated before (no caching).
%C A331124 Conjecture: for large n, this sequence is bounded by a small constant times n^(4/3).
%H A331124 Rémy Sigrist, <a href="/A331124/b331124.txt">Table of n, a(n) for n = 0..10000</a>
%H A331124 GeeksforGeeks, <a href="https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/">Program for Fibonacci numbers</a>, see method 6, but erroneously states to take O(log n) operations.
%H A331124 Rémy Sigrist, <a href="/A331124/a331124.gp.txt">PARI program for A331124</a>
%F A331124 a(0) = 1,
%F A331124 a(1) = 1,
%F A331124 a(2) = 1,
%F A331124 a(n) = a((n + 1)/2) + a((n - 1)/2) + 1, n odd and n > 2,
%F A331124 a(n) = a(n/2) + a(n/2 - 1) + a(n/2 + 1) + 1, n even.
%e A331124 a(5) = a(3) + a(2) + 1 = (a(2) + a(1) + 1) + a(2) + 1 = 5.
%o A331124 (Fortran)
%o A331124 program main
%o A331124   implicit none
%o A331124   integer, parameter :: pmax = 100
%o A331124   integer :: r, n
%o A331124   logical, dimension(0:pmax) :: cache
%o A331124   do n = 0, pmax
%o A331124      cache (0:2) = .true.
%o A331124      cache (3:pmax) = .false.
%o A331124      r = a(n)
%o A331124      write (*,fmt="(I0,', ')", advance="no") r
%o A331124   end do
%o A331124   write (*,fmt="()")
%o A331124 contains
%o A331124   recursive function a (n) result(r)
%o A331124     integer, intent(in) :: n
%o A331124     integer :: r
%o A331124     if (cache(n)) then
%o A331124        r = 1
%o A331124        return
%o A331124     else if (mod(n, 2) == 1) then
%o A331124        r = a ((n + 1)/2) + a ((n - 1)/2) + 1
%o A331124     else
%o A331124        r = a (n/2) + a(n/2 - 1) + a(n/2 + 1) + 1
%o A331124     end if
%o A331124     cache (n) = .false.
%o A331124   end function a
%o A331124 end program main
%o A331124 (PARI) \\ See Links section.
%Y A331124 Cf. A000045; see A331164 for the number of function evaluations with caching.
%K A331124 nonn,easy,look
%O A331124 0,4
%A A331124 _Thomas König_, Jan 10 2020
