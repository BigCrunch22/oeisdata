%I A376720 #9 Oct 05 2024 20:01:11
%S A376720 72,108,200,144,392,216,400,968,675,288,500,1352,324,784,1800,1323,
%T A376720 2312,432,1125,2888,800,3528,1936,2700,4232,576,1372,3267,1000,2704,
%U A376720 648,1568,6728,4563,3600,7688,5292,8712,2025,4624,9800,864,3087,10952,4500,5776,7803
%N A376720 Product of numbers m that are neither squarefree nor prime powers and rad(m), where rad = A007947.
%C A376720 Term a(n) = k is powerful but not a prime power (i.e., in A286708) such that k/rad(k) is not squarefree, where rad = A007947 and k/rad(k) = A003557(k).
%C A376720 Permutation of A372404.
%H A376720 Michael De Vlieger, <a href="/A376720/b376720.txt">Table of n, a(n) for n = 1..65536</a>
%H A376720 Michael De Vlieger, <a href="/A376720/a376720.png">Log log scatterplot of a(n)</a>, n = 1..2^16.
%F A376720 a(n) = m * rad(m) for m in A126706.
%e A376720 Let b(n) = A126706(n).
%e A376720 Table of b(n) and a(n) for n <= 12:
%e A376720    n   b(n)                a(n)
%e A376720   -----------------------------------------
%e A376720    1    12 = 2^2 * 3        72 = 2^3 * 3^2
%e A376720    2    18 = 2 * 3^2       108 = 2^2 * 3^3
%e A376720    3    20 = 2^2 * 5       200 = 2^3 * 5^2
%e A376720    4    24 = 2^3 * 3       144 = 2^4 * 3^2
%e A376720    5    28 = 2^2 * 7       392 = 2^3 * 7^2
%e A376720    6    36 = 2^2 * 3^2     216 = 2^3 * 3^3
%e A376720    7    40 = 2^3 * 5       400 = 2^4 * 5^2
%e A376720    8    44 = 2^2 * 11      968 = 2^3 * 11^2
%e A376720    9    45 = 3^2 * 5       675 = 3^3 * 5^2
%e A376720   10    48 = 2^4 * 3       288 = 2^5 * 3^2
%e A376720   11    50 = 2 * 5^2       500 = 2^2 * 5^3
%e A376720   12    52 = 2^2 * 13     1352 = 2^3 * 13^2
%t A376720 Map[#*Times @@ FactorInteger[#][[All, 1]] &, Select[Range[12, 160], Nor[PrimePowerQ[#], SquareFreeQ[#]] &] ]
%o A376720 (Python)
%o A376720 from math import prod, isqrt
%o A376720 from sympy import primepi, integer_nthroot, mobius, primefactors
%o A376720 def A376720(n):
%o A376720     def bisection(f,kmin=0,kmax=1):
%o A376720         while f(kmax) > kmax: kmax <<= 1
%o A376720         while kmax-kmin > 1:
%o A376720             kmid = kmax+kmin>>1
%o A376720             if f(kmid) <= kmid:
%o A376720                 kmax = kmid
%o A376720             else:
%o A376720                 kmin = kmid
%o A376720         return kmax
%o A376720     def f(x): return int(n+sum(primepi(integer_nthroot(x,k)[0]) for k in range(2,x.bit_length()))+sum(mobius(k)*(x//k**2) for k in range(1, isqrt(x)+1)))
%o A376720     return (m:=bisection(f,n,n))*prod(primefactors(m)) # _Chai Wah Wu_, Oct 05 2024
%Y A376720 Cf. A003557, A007947, A126706, A286708, A372404.
%K A376720 nonn,easy,new
%O A376720 1,1
%A A376720 _Michael De Vlieger_, Oct 05 2024
