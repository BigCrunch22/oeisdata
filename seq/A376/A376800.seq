%I A376800 #16 Oct 12 2024 14:43:53
%S A376800 30,42,70,105,2431,2717,3289,3553,4147,4199,4301,4433,4807,5083,5291,
%T A376800 5423,5681,5797,5863,6061,6149,6409,6479,6721,6851,6919,7163,7337,
%U A376800 7429,7579,7657,7667,7733,7843,8041,8177,8437,8569,8671,8723,8789,8987,9061,9139,9269
%N A376800 3-brilliant numbers with distinct prime factors.
%H A376800 Michael S. Branicky, <a href="/A376800/b376800.txt">Table of n, a(n) for n = 1..10000</a>
%e A376800 30 = 2*3*5 is a term.
%e A376800 2431 = 11*13*17 is a term.
%o A376800 (Python)
%o A376800 from sympy import factorint
%o A376800 def ok(n):
%o A376800     f = factorint(n)
%o A376800     return len(f) == sum(f.values()) == 3 and len(set([len(str(p)) for p in f])) == 1
%o A376800 print([k for k in range(9300) if ok(k)]) # _Michael S. Branicky_, Oct 05 2024
%o A376800 (Python)
%o A376800 from math import prod
%o A376800 from sympy import primerange
%o A376800 from itertools import count, combinations, islice
%o A376800 def bgen(d): # generator of terms that are products of d-digit primes
%o A376800     primes, out = list(primerange(10**(d-1), 10**d)), set()
%o A376800     for t in combinations(primes, 3): out.add(prod(t))
%o A376800     yield from sorted(out)
%o A376800 def agen(): # generator of terms
%o A376800     for d in count(1): yield from bgen(d)
%o A376800 print(list(islice(agen(), 45))) # _Michael S. Branicky_, Oct 05 2024
%Y A376800 Intersection of A376703 and A007304.
%K A376800 nonn,base,easy,new
%O A376800 1,1
%A A376800 _Paul Duckett_, Oct 04 2024
%E A376800 a(6) and beyond from _Michael S. Branicky_, Oct 05 2024
