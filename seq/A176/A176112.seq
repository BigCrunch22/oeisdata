%I A176112
%S A176112 3,5,41,43,53,61,109,139,149,163,167,173,179,227,233,269,307,317,373,
%T A176112 401,439,443,479,541,557,563,607,617,619,661,751,787,827,863,911,937,
%U A176112 1069,1087,1093,1097,1193,1259,1297,1303,1321,1373,1381,1409,1439
%N A176112 This sequence contains primes that, under the Collatz function, take a prime number of steps to reach one.
%C A176112 Primes p such that A006577(p) is prime. - _Charles R Greathouse IV_, May 12 2015
%H A176112 Charles R Greathouse IV, <a href="/A176112/b176112.txt">Table of n, a(n) for n = 1..10000</a>
%t A176112 pnsQ[n_]:=PrimeQ[Length[NestWhileList[If[EvenQ[#],#/2,3#+1]&,n,#>1&]]- 1];  Select[Prime[Range[500]],pnsQ] (* _Harvey P. Dale_, Nov 28 2016 *)
%o A176112 (Python)
%o A176112 ###################################################################
%o A176112 # Kent E. Hays 04.05.2010
%o A176112 # Function: Collatz
%o A176112 # This function takes a positive integer, and returns the number
%o A176112 # of steps necessary for the Collatz function to reduce the
%o A176112 # integer to one.
%o A176112 def Collatz(number):
%o A176112 ....X = number
%o A176112 ....Steps = 0
%o A176112 ....while X != 1:
%o A176112 ........Steps += 1
%o A176112 ........if X%2==0:
%o A176112 ............X //= 2
%o A176112 ........else:
%o A176112 ............X = 3*X + 1
%o A176112 ....return Steps
%o A176112 ###################################################################
%o A176112 # Kent E. Hays 12.24.2009
%o A176112 # Function: primer
%o A176112 # This function takes a positive integer n, and returns a list of
%o A176112 # primes, whose length is equal to n, starting with the smallest
%o A176112 # prime and increasing in size.
%o A176112 def primer(n):
%o A176112 ....if n==1:
%o A176112 ........return [2]
%o A176112 ....elif n==2:
%o A176112 ........return [2,3]
%o A176112 ....elif n<2:
%o A176112 ........return []
%o A176112 ....p = [2,3]
%o A176112 ....x = 0
%o A176112 ....i = 3
%o A176112 ....while len(p) < n+1:
%o A176112 ........if x < len(p):
%o A176112 ............if i%p[x] != 0:
%o A176112 ................x += 1
%o A176112 ............if p[x]> i**0.5:
%o A176112 ................p.append(i)
%o A176112 ................x = 0
%o A176112 ................i += 2
%o A176112 ............if i%p[x] == 0:
%o A176112 ................i += 2
%o A176112 ................x = 0
%o A176112 ....return [2]+p[2:]
%o A176112 ##################################################################
%o A176112 # Kent E. Hays 04.08.2010
%o A176112 # The rest of the operations that I needed
%o A176112 # To be honest, I was tired when I wrote this bit. I'm pretty sure there is an extra dictionary in here. This bit of code takes the two functions above, and uses them to examine whether or not the
%o A176112 # primes in the PrimeList take a prime number of steps to reduce to
%o A176112 # one using the Collatz function defined above, and then puts all
%o A176112 # these "Collatz primes" into a list called ColLineList. Change the
%o A176112 # integer in "primeList = primer(n)" to give a pool of prime values
%o A176112 # to check.
%o A176112 ColDict = {}
%o A176112 ColPrime = {}
%o A176112 ColPriList = []
%o A176112 ColLineList = []
%o A176112 PrimeList = primer(10000000)
%o A176112 for number in PrimeList:
%o A176112 ....Var = Collatz(number)
%o A176112 ....if Var not in ColDict:
%o A176112 ........ColDict[Var] = [number]
%o A176112 ....elif Var in ColDict:
%o A176112 ........ColDict[Var].append(number)
%o A176112 for key in ColDict:
%o A176112 ....if key in PrimeList:
%o A176112 ........ColPriList = ColPriList + ColDict[key] . ColPriList.sort()
%o A176112 (PARI) A006577(n)=my(s);while(n>1,n=if(n%2,3*n+1,n/2);s++);s
%o A176112 select(p->isprime(A006577(p)), primes(100)) \\ _Charles R Greathouse IV_, May 12 2015
%Y A176112 Cf. A006577.
%K A176112 nonn,changed
%O A176112 1,1
%A A176112 Kent Edward Hays (hayske(AT)gmail.com), Apr 08 2010
