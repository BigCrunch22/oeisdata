%I A364973 #30 Oct 30 2023 03:26:14
%S A364973 1,1,4,26,217,2110,22744,264057,3242395,41596252,552733376,7559811021,
%T A364973 105919629403,1514674166755,22043665219240,325734154669786
%N A364973 a(n) = number of degree n rational curves in the complex projective plane which satisfy an order 3n-1 local tangency constraint.
%C A364973 This is the number of degree d rational curves in the complex projective plane which pass through a specified point and have contact order 3d-1 to a generic smooth local divisor through that point.
%C A364973 After multiplying by 3d-1, this sequence appears to agree with A353195.
%C A364973 Computed in terms of Gromov-Witten invariants of rational surfaces in McDuff-Siegel 2021.
%C A364973 Agrees with the count of osculating curves, which are defined and computed by a recursive formula in Muratore 2021.
%C A364973 Computed by a recursive formula in Mikhalkin-Siegel 2023.
%C A364973 Computed by a closed formula as sum over trees with d leaves and combinatorially defined weights in Siegel 2023.
%H A364973 D. McDuff and K. Siegel, <a href="https://doi.org/10.1112/topo.12204">Counting curves with local tangency constraints</a>, J. Top., 14 (2021) 1176-1242.
%H A364973 G. Mikhalkin and K. Siegel, <a href="https://arxiv.org/abs/2307.13252">Ellipsoidal superpotentials and stationary descendants</a>, arXiv:2307.13252 [math.SG] (2023).
%H A364973 G. Muratoro, <a href="https://www.intlpress.com/site/pub/pages/journals/items/arkiv/content/vols/0059/0001/a007/index.php">A recursive formula for osculating curves</a>, Arkiv Mat., 59 (2021) 195-211.
%H A364973 K. Siegel, <a href="https://doi.org/10.1093/imrn/rnaa334">Computing higher symplectic capacities I</a>, Int. Math. Res. Not., 2022 (2021) 12402-12461.
%H A364973 K. Siegel, <a href="https://kylersiegel.xyz/tree_formula.pdf">A tree formula for the ellipsoidal superpotential of the complex projective plane</a> (2023).
%o A364973 (Sage)
%o A364973 # The following code is written in Sage and is based on the recursive formula in Mikhalkin-Siegel 2023. Note that a slightly more efficient formula is given by using Partitions instead of OrderedPartitions, at the cost of an extra combinatorial factor.
%o A364973 def a(n):
%o A364973 	if n == 1:
%o A364973 		return 1
%o A364973 	out = 1/(factorial(n)**3)
%o A364973 	for p in [p for p in OrderedPartitions(n) if len(p) > 1]:
%o A364973 		k = len(p)
%o A364973 		summand = prod([(3*m-1)*a(m) for m in p])
%o A364973 		summand /= factorial(k)*factorial(3*n-k)
%o A364973 		out -= summand
%o A364973 	out *= factorial(3*n-2)
%o A364973 	return out
%o A364973 for n in range(1,20):
%o A364973 	print(a(n))
%Y A364973 Cf. A353195 (after multiplying by 3d-1).
%K A364973 nonn,more,new
%O A364973 1,3
%A A364973 _Kyler Siegel_, Aug 22 2023
