%I A364353 #40 Aug 24 2023 10:41:04
%S A364353 24,32,40,41,45,46,48,49,53,56,57,61,62,71,80,85,87,88,92,95,96,101,
%T A364353 103,104,105,106,108,109,110,111,112,113,116,117,119,120,121,122,124,
%U A364353 125,126,127,131,134,135,140,142,143,144
%N A364353 Numbers that cannot be expressed as the sum of the squares of four Fibonacci numbers.
%C A364353 User vvg asked on Math StackExchange if this sequence is empty, by analogy with Lagrange's Four Square Theorem and Zeckendorf's Theorem (see links). As mentioned by user Empy2, 'most' of the positive integers belong to this sequence: there are O(log n) Fibonacci squares below n, so there are at most O( (log n)^4 ) distinct sums below n, which is asymptotically much smaller than n.
%H A364353 Math StackExchange, <a href="https://math.stackexchange.com/q/4738778/80734">Is every integer representable as the sum of four Fibonacci squares?</a>.
%H A364353 Eric Weisstein's World of Mathematics, <a href="https://mathworld.wolfram.com/LagrangesFour-SquareTheorem.html">Lagrange's Four-Square Theorem</a>.
%H A364353 Eric Weisstein's World of Mathematics, <a href="https://mathworld.wolfram.com/ZeckendorfsTheorem.html">Zeckendorf's Theorem</a>.
%e A364353 24 is a term, which can be seen as follows.  The Fibonacci squares less than 24 are 0,1,4 and 9. We must use at least two 9s, as 24>9+4+4+4=21. But 24-18=6 is neither a square nor a sum of two Fibonacci squares. Hence, 24 has no representation of the required form.
%e A364353 32 is a term, as follows. The Fibonacci squares less than 32 are 0,1,4,9, and 25. We cannot use 25 as 7 cannot be written with 3 Fibonacci squares. Therefore, we must have at least three 9s, but 32-9-9-9=5 is not a Fibonacci square. The result follows.
%o A364353 (Scala)
%o A364353 @main def main(args: Int*): Unit =
%o A364353     val max = 10000
%o A364353     def fibFrom(n: Int, m: Int): LazyList[Int] =
%o A364353       n #:: m #:: fibFrom(n + m, n + 2 * m)
%o A364353     val fib = fibFrom(0, 1)
%o A364353     def computeReprs(min: Int, max: Int) = (for
%o A364353       n <- min to max
%o A364353       f1 <- fib.takeWhile(f => f * f <= n)
%o A364353       f2 <- fib.dropWhile(_ < f1).takeWhile(f => f * f <= n - f1 * f1)
%o A364353       f3 <- fib
%o A364353         .dropWhile(_ < f2)
%o A364353         .takeWhile(f => f * f <= n - f1 * f1 - f2 * f2)
%o A364353       f4 = fib
%o A364353         .dropWhile(f => f * f < n - f1 * f1 - f2 * f2 - f3 * f3)
%o A364353         .head
%o A364353       if n == f1 * f1 + f2 * f2 + f3 * f3 + f4 * f4
%o A364353     yield (n +: Seq(f1, f2, f3, f4)
%o A364353       .filter(_ != 0)
%o A364353       .map(fib.indexOf(_)))).distinct
%o A364353   val reprs = computeReprs(0, max)
%o A364353     // printing out to console for creating b-file
%o A364353   val nosWithoutReprs = (0 to max)
%o A364353       .filter(i => reprs.forall(k => k(0) != i))
%o A364353   ((1 to nosWithoutReprs.length) zip nosWithoutReprs)
%o A364353     .foreach((p, q) => println(s"$p $q"))
%Y A364353 Cf. A000045, A007598, A364354 (complement).
%K A364353 nonn
%O A364353 1,1
%A A364353 _Calvin Khor_, Jul 20 2023
