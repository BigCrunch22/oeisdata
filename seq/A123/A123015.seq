%I A123015 #7 May 03 2020 09:14:22
%S A123015 1,2,3,4,6,8,10,13,17,21,26,33,41,50,62,77,94,115,142,174,212,260,319,
%T A123015 389,475,582,711,867,1060,1296,1581,1930,2359,2880,3514,4292,5242,
%U A123015 6397,7809,9537,11642,14209,17349,21182,25854,31561,38534,47039,57418,70098,85576
%N A123015 Grow a binary tree using the following rules. Initially there is a single node labeled 1. At each step we add 1 to all labels less than 3. If a node has label 3 and zero or one descendants we add a new descendant labeled 1. Sequence gives sum of all labels at step n.
%C A123015 An analog of Fibonacci's rabbits. The behavior of the node is given by its age. A node of age 0 or 1 grows and one of age 2 or 3 produces a new node. - _Christian G. Bower_, Nov 13 2006
%F A123015 a(n) = a(n-3)+a(n-4)+3. - _Ralf Stephan_, Nov 12 2006
%F A123015 G.f.: (1+x+x^2)/(1-x-x^3+x^5). - _Christian G. Bower_, Nov 13 2006
%e A123015 step #0:
%e A123015 ..1
%e A123015 step #1:
%e A123015 ..2
%e A123015 step #2:
%e A123015 ..3
%e A123015 step #3:
%e A123015 ..3
%e A123015 ./
%e A123015 1
%e A123015 step #4:
%e A123015 ..3
%e A123015 ./.\
%e A123015 2...1
%e A123015 step #5:
%e A123015 ..3
%e A123015 ./.\
%e A123015 3...2
%e A123015 step #6:
%e A123015 ....3
%e A123015 .../.\
%e A123015 ..3...3
%e A123015 ./
%e A123015 1
%e A123015 step #7:
%e A123015 ......3
%e A123015 ..../...\
%e A123015 ..3.......3
%e A123015 ./.\...../
%e A123015 2...1...1
%e A123015 step #8:
%e A123015 ......3
%e A123015 ..../...\
%e A123015 ..3.......3
%e A123015 ./.\...../.\
%e A123015 3...2...2...1
%o A123015 (Ruby) class Node; def initialize; @n = 1; @c = [] end
%o A123015 def count; @c.inject(@n){|n,c| n + c.count} end
%o A123015 def grow; return @n += 1 if @n < 3; @c.each{|c| c.grow }
%o A123015 @c << Node.new if @c.size < 2; end; end; r = []; node = Node.new
%o A123015 30.times { r << node.count; node.grow }; p r
%Y A123015 Cf. A123552.
%K A123015 nonn,easy
%O A123015 0,2
%A A123015 _Simon Strandgaard_, Nov 12 2006
