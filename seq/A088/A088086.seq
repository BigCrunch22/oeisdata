%I A088086 #16 Nov 18 2023 07:26:50
%S A088086 2,3,9,11,313,33,9339,303,909,747,383,7,969,797,141,12721,1881,161,
%T A088086 343,77,333,7227,181,737,30603,14841,12621,1111,15051,777,939,7887,
%U A088086 7997,13231,191,79297,13331,11511,19191,38583,3993,949,17171,15351,318813
%N A088086 a(1) = 2; then smallest palindrome > 1 not occurring earlier such that every partial concatenation is a prime.
%H A088086 Robert Israel, <a href="/A088086/b088086.txt">Table of n, a(n) for n = 1..635</a>
%e A088086 2, 23, 239, 23911, etc. are primes.
%p A088086 A:= [1,3,7,9]: B:= [1,3,7,9]:
%p A088086 P:= 3,7,9,op(zip((s,t) -> s*10+t, A, B)):
%p A088086 for d from 1 to 6 do
%p A088086   P:= P, op(zip(proc(s,t) local i; seq(10^(d+1)*s + 10^d*i + t,i=0..9) end proc, A, B)):
%p A088086   A:= map(proc(t) local i; seq(10*t+i,i=0..9) end proc, A);
%p A088086   B:= map(proc(t) local i; seq(10^d*i+t, i=0..9) end proc, B);
%p A088086   P:= P, op(zip((s,t) -> 10^(d+1)*s+t,A,B));
%p A088086 od:
%p A088086 P:= [P]:
%p A088086 R:= 2: p:= 2:
%p A088086 for i from 2 to 50 do
%p A088086   for j from 1 do
%p A088086     v:= p*10^(1+ilog10(P[j]))+P[j];
%p A088086     if isprime(v) then
%p A088086       p:= v;
%p A088086       R:= R, P[j];
%p A088086       P:= subsop(j=NULL, P);
%p A088086       break
%p A088086     fi
%p A088086 od od:
%p A088086 R; # _Robert Israel_, Nov 15 2023
%o A088086 (Python)
%o A088086 from gmpy2 import is_prime
%o A088086 from itertools import count, islice, product
%o A088086 def bgen(): # generator of palindromic decimal strings ending in 1, 3, 7, 9
%o A088086     yield from "379"
%o A088086     for digits in count(2):
%o A088086         for first in "1379":
%o A088086             for left in product("0123456789", repeat=(digits-2)//2):
%o A088086                 left = "".join(left)
%o A088086                 right = left[::-1]
%o A088086                 for mid in [[""], "0123456789"][digits%2]:
%o A088086                     yield first + left + mid + right + first
%o A088086 def agen():
%o A088086     alst, aset, concat = [2], {"2"}, "2"
%o A088086     while True:
%o A088086         yield alst[-1]
%o A088086         g = bgen()
%o A088086         s = next(g)
%o A088086         while "start" in s or s in aset or not is_prime(int(concat + s)):
%o A088086             s = next(g)
%o A088086         concat += s
%o A088086         aset.add(s)
%o A088086         alst.append(int(s))
%o A088086 print(list(islice(agen(), 45))) # _Michael S. Branicky_, Nov 18 2023
%Y A088086 Cf. A088087, A088084.
%K A088086 base,nonn
%O A088086 1,1
%A A088086 _Amarnath Murthy_, Sep 22 2003
%E A088086 More terms from _Sam Alexander_, Nov 17 2003
%E A088086 More terms from _David Wasserman_, Jul 13 2005
