%I A285106 #9 Apr 12 2017 04:43:19
%S A285106 1,2,2,3,4,5,3,4,5,7,7,6,7,8,4,5,6,8,8,9,10,10,8,8,8,10,10,9,10,11,5,
%T A285106 6,7,9,11,10,14,16,14,13,14,13,15,17,14,16,10,10,10,11,15,14,15,17,15,
%U A285106 13,11,13,13,12,13,14,6,7,8,10,14,13,15,19,21,17,18,20,24,25,22,20,20,16,17,19,25,23,25,30,20,22,20,20,26,26
%N A285106 a(n) = A001222(A284576(n)).
%H A285106 Antti Karttunen, <a href="/A285106/b285106.txt">Table of n, a(n) for n = 0..8192</a>
%F A285106 a(n) = A001222(A284576(n)).
%F A285106 a(n) = A285107(n) + A285108(n).
%F A285106 Other identities. For all n >= 0:
%F A285106 A007306(1+n) = a(n) + A285108(n).
%o A285106 (Scheme)
%o A285106 (define (A285106 n) (A001222 (A284576 n)))
%o A285106 ;; A more practical version, needing only an implementation of A003986bi (bitwise-or, A003986) and memoization-macro definec:
%o A285106 (define (A285106 n) (apply + (bitwise_or_of_exp_lists (A260443as_coeff_list n) (A260443as_coeff_list (+ 1 n)))))
%o A285106 (define (bitwise_or_of_exp_lists nums1 nums2) (let ((len1 (length nums1)) (len2 (length nums2))) (cond ((< len1 len2) (bitwise_or_of_exp_lists nums2 nums1)) (else (map A003986bi nums1 (append nums2 (make-list (- len1 len2) 0)))))))
%o A285106 (definec (A260443as_coeff_list n) (cond ((zero? n) (list)) ((= 1 n) (list 1)) ((even? n) (cons 0 (A260443as_coeff_list (/ n 2)))) (else (add_two_lists (A260443as_coeff_list (/ (- n 1) 2)) (A260443as_coeff_list (/ (+ n 1) 2))))))
%o A285106 (define (add_two_lists nums1 nums2) (let ((len1 (length nums1)) (len2 (length nums2))) (cond ((< len1 len2) (add_two_lists nums2 nums1)) (else (map + nums1 (append nums2 (make-list (- len1 len2) 0)))))))
%Y A285106 Cf. A001222, A003986, A007306, A284576, A285107, A285108.
%K A285106 nonn
%O A285106 0,2
%A A285106 _Antti Karttunen_, Apr 11 2017
