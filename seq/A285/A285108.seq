%I A285108 #8 Apr 12 2017 04:43:19
%S A285108 0,0,1,0,0,0,2,0,0,0,1,1,0,0,3,0,0,1,3,1,1,3,4,1,1,2,3,2,0,0,4,0,0,2,
%T A285108 3,3,1,2,3,0,0,6,6,1,3,3,6,1,1,5,4,3,3,4,4,1,2,4,5,3,0,0,5,0,0,3,3,3,
%U A285108 4,4,1,0,1,6,5,0,2,7,3,0,0,6,5,4,4,4,11,1,2,9,5,0,3,3,8,1,1,7,4,3,4,8,10,3,3,11,6,3,4,9,4,1,1,5,5,3,3,5,4,1
%N A285108 a(n) = A001222(A284578(n)).
%H A285108 Antti Karttunen, <a href="/A285108/b285108.txt">Table of n, a(n) for n = 0..8192</a>
%F A285108 a(n) = A001222(A284578(n)).
%F A285108 a(n) = A285106(n) - A285107(n).
%F A285108 Other identities. For all n >= 0:
%F A285108 A007306(1+n) = A285106(n) + a(n) = A285107(n) + 2*a(n).
%o A285108 (Scheme)
%o A285108 (define (A285108 n) (A001222 (A284578 n)))
%o A285108 ;; A more practical version, needing only an implementation of A004198bi (bitwise-and, A004198) and memoization-macro definec:
%o A285108 (define (A285108 n) (apply + (bitwise_and_of_exp_lists (A260443as_coeff_list n) (A260443as_coeff_list (+ 1 n)))))
%o A285108 (define (bitwise_and_of_exp_lists nums1 nums2) (let ((len1 (length nums1)) (len2 (length nums2))) (cond ((< len1 len2) (bitwise_and_of_exp_lists nums2 nums1)) (else (map A004198bi nums1 (append nums2 (make-list (- len1 len2) 0)))))))
%o A285108 (definec (A260443as_coeff_list n) (cond ((zero? n) (list)) ((= 1 n) (list 1)) ((even? n) (cons 0 (A260443as_coeff_list (/ n 2)))) (else (add_two_lists (A260443as_coeff_list (/ (- n 1) 2)) (A260443as_coeff_list (/ (+ n 1) 2))))))
%o A285108 (define (add_two_lists nums1 nums2) (let ((len1 (length nums1)) (len2 (length nums2))) (cond ((< len1 len2) (add_two_lists nums2 nums1)) (else (map + nums1 (append nums2 (make-list (- len1 len2) 0)))))))
%Y A285108 Cf. A001222, A004198, A007306, A284578, A285106, A285107.
%K A285108 nonn
%O A285108 0,7
%A A285108 _Antti Karttunen_, Apr 11 2017
