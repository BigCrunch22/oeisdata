%I A096168 #46 Mar 26 2023 02:12:34
%S A096168 1,3,9,24,66,180,468,1206,3150,7998,20124,50520,124044,303906,744870,
%T A096168 1790226,4319322,10432044,24926934,59570514,142662384,339247320,
%U A096168 807092274,1920506232,4543861644
%N A096168 Number of Abelian cubefree words over a 3-letter alphabet.
%C A096168 An abelian cube is three consecutive blocks that are anagrams (rearrangements) of each other, such as (012)(120)(102).
%C A096168 For n > 1, a(n) is a multiple of 3 by symmetry. - _Michael S. Branicky_, Jul 11 2021
%H A096168 A. Aberkane, J. D. Currie and N. Rampersad, <a href="http://www.cs.uwaterloo.ca/journals/JIS/VOL7/Currie/currie18.html">The Number of Ternary Words Avoiding Abelian Cubes Grows Exponentially</a>, J. Integer Sequences, Article 04.2.7, 2004.
%H A096168 A. V. Samsonov and A. M. Shur, <a href="http://dx.doi.org/10.1051/ita/2011127">On Abelian repetition threshold</a>, RAIRO-Theor. Inf. Appl. 46 (2012) 147-163.
%F A096168 Let L = lim a(n)^(1/n); then L exists since a(n) is submultiplicative. L > 2^(1/24) (Aberkane, Currie, Rampersad 2004), L < 2.371237 (Samsonov, Shur 2012). No good empirical guess for L is known. - _Arseny Shur_, Apr 27 2015
%F A096168 A305595(n) <= a(n) <= A051042(n). - _Michael S. Branicky_, Jul 11 2021
%e A096168 a(3) = 24, since the only Abelian cubes of length 3 are 000, 111, 222.
%o A096168 (Python)
%o A096168 from itertools import product
%o A096168 def anagrams(b1, b2, b3):
%o A096168     return sorted(b1) == sorted(b2) == sorted(b3)
%o A096168 def acf(s):
%o A096168     for l in range(1, len(s)//3 + 1):
%o A096168       for i in range(len(s) - 3*l + 1):
%o A096168           if anagrams(s[i:i+l], s[i+l:i+2*l], s[i+2*l:i+3*l]): return False
%o A096168     return True
%o A096168 def a(n):
%o A096168     if n == 0: return 1
%o A096168     return 3*sum(acf("0"+"".join(w)) for w in product("012", repeat=n-1))
%o A096168 print([a(n) for n in range(14)]) # _Michael S. Branicky_, Jul 11 2021
%o A096168 (Python) # faster, but > memory, version for initial segment of sequence
%o A096168 def anagrams(b1, b2, b3): return sorted(b1) == sorted(b2) == sorted(b3)
%o A096168 def iacf(s): # incrementally abelian cubefree
%o A096168     for l in range(1, len(s)//3 + 1):
%o A096168         if anagrams(s[-3*l:-2*l], s[-2*l:-l], s[-l:]): return False
%o A096168     return True
%o A096168 def aupton(nn, verbose=False):
%o A096168     alst, acfs = [1], set("0")
%o A096168     for n in range(1, nn+1):
%o A096168         an = 3*len(acfs)
%o A096168         acfsnew = set(c+i for c in acfs for i in "012" if iacf(c+i))
%o A096168         alst, acfs = alst+[an], acfsnew
%o A096168         if verbose: print(n, an)
%o A096168     return alst
%o A096168 print(aupton(14)) # _Michael S. Branicky_, Jul 22 2021
%Y A096168 Cf. A051042, A305595.
%K A096168 nonn,hard,more
%O A096168 0,2
%A A096168 _Jeffrey Shallit_, Jun 19 2004
%E A096168 More terms from _Jeffrey Shallit_, May 23 2018
%E A096168 a(19)-a(21) from _Michael S. Branicky_, Jul 22 2021
%E A096168 a(22)-a(24) from _Michael S. Branicky_, Mar 25 2023
