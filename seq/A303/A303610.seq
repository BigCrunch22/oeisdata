%I A303610 #27 Jul 05 2018 00:56:15
%S A303610 10,1010,110100,11010100,1101100100,110110100100,11101010101000,
%T A303610 1110110101001000,111011010101001000,11101101101001001000,
%U A303610 1110111010101010001000,111011101010101010001000,11110110110101010010010000,1111011011010101010010010000,111101110101101010010100010000
%N A303610 Circle aliasing numbers with 1/n size steps.
%C A303610 Starting from [-1,0] taking 2*n steps of length 1/n each either up or right, follow the path staying as close to the unit circle as possible. Every step up is considered a 1, every step right is considered a 0.
%e A303610 For n=3, we have 110100, meaning if we were to start at [-1, 0] and take 2*n=6 steps of length 1/n = 1/6 which can either be up or to the right, to follow the path of the unit circle the closest we would move up 1, up 1 again, then right, then up again, then right two more times, which we translate to the binary number 110100.
%o A303610 (Python)
%o A303610 def closer(pos1, pos2):
%o A303610     dpos1 = (pos1[0]**2.0+pos1[1]**2.0)**.5
%o A303610     dpos2 = (pos2[0]**2.0+pos2[1]**2.0)**.5
%o A303610     if (1.0-dpos1)**2.0 < (1.0-dpos2)**2.0:
%o A303610         return True
%o A303610     else:
%o A303610         return False
%o A303610 def converts(path):
%o A303610     return ''.join(path)
%o A303610 l = []
%o A303610 for steps in range(1, 20):
%o A303610     stepsize = 1.0/steps
%o A303610     pos = [-1.0, 0.0]
%o A303610     paths = []
%o A303610     for i in range(0, 2*steps):
%o A303610         if closer([pos[0]+stepsize, pos[1]], [pos[0], pos[1]+stepsize]):
%o A303610             pos = [pos[0]+stepsize, pos[1]]
%o A303610             paths.append(str(0))
%o A303610         else:
%o A303610             pos = [pos[0], pos[1]+stepsize]
%o A303610             paths.append(str(1))
%o A303610     l.append(int(converts(paths)))
%o A303610 print(l)
%Y A303610 Subsequence of A035928 in binary.
%K A303610 nonn
%O A303610 1,1
%A A303610 _Ben Paul Thurston_, May 06 2018
