%I A371477 #45 Sep 26 2024 23:36:45
%S A371477 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,20,22,24,26,28,30,32,36,40,
%T A371477 44,48,52,56,60,64,72,80,88,96,104,112,120,128,144,160,176,192,208,
%U A371477 224,240
%N A371477 Positive integers that can be represented in an 8-bit floating point format.
%C A371477 A floating point number representation as a bit string consists of a sign bit, some bits for an exponent for a power of two and the remaining bits are for a mantissa for a fixed point number.
%C A371477 In this 8-bit format, there is one sign bit (S), four exponent bits (E) and three mantissa bits (M). These 8-bit strings correspond to rational numbers (-1)^S * 1.M * 2^(E-7), where 1.M and E are interpreted as numbers written in binary (note the exponent bias of 7), except when the exponent bit string is 0000 or 1111. See Burch or Wikipedia for more details on this format.
%C A371477 This is not the only possible apportionment of the bits. E.g. Verts (2005) proposes an 8-bit format with three exponent bits and four mantissa bits. In the Verts system, the only positive integers that can be represented are the integers from 1 to 15.
%H A371477 Carl Burch, <a href="http://www.cburch.com/books/float/">Floating-point representation</a>, Carl Burch's website.
%H A371477 William T. Verts, <a href="https://people.cs.umass.edu/~verts/cmpsci145/8-Bit_Floating_Point.pdf">An 8-Bit Floating Point Representation</a>
%H A371477 Wikipedia, <a href="https://en.wikipedia.org/wiki/Minifloat">Minifloat</a>
%e A371477 18 is in the sequence because it can be represented as 0 1011 001, meaning sign bit 0, exponent 11-7 = 4, and tacit leading 1 plus explicit 1/8 for the mantissa. The corresponding number in binary is then 1.001 * 10^(1011-111), or in decimal 1.125 * 2^(11-7) = 9/8 * 16 = 18.
%e A371477 19 is not in the sequence because it would require at least four mantissa bits.
%e A371477 20 is in the sequence because it can be represented as 0 1011 010.
%e A371477 256 is not in this sequence because it would require exponent 8, so the exponent bits would be 1111 (15 in binary, with 15-7 = 8), but that exponent bit string is reserved for a special, non-numerical interpretation. 512 or 1024 are also not in this sequence because their exponents do not fit into four bits (taking into account the bias of 7).
%o A371477 (Scala) def oddPart(n: Int): Int = {
%o A371477   if (n == 0) {
%o A371477     0
%o A371477   } else {
%o A371477     var num = n
%o A371477     while (num % 2 == 0) {
%o A371477       num >>= 1
%o A371477     }
%o A371477     num
%o A371477   }
%o A371477 }
%o A371477 (1 to 255).filter(oddPart(_) < 16)
%Y A371477 Cf. A000265 (odd part of n).
%K A371477 nonn,fini,full
%O A371477 1,2
%A A371477 _Alonso del Arte_, Mar 25 2024
