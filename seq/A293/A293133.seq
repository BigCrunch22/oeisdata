%I A293133 #23 Oct 23 2018 11:09:31
%S A293133 1,1,1,1,0,-1,1,0,2,1,1,0,0,-6,1,1,0,0,6,36,-19,1,0,0,0,-24,-240,151,
%T A293133 1,0,0,0,24,120,1920,-1091,1,0,0,0,0,-120,-360,-17640,7841,1,0,0,0,0,
%U A293133 120,720,0,183120,-56519,1,0,0,0,0,0,-720,-5040,20160,-2116800
%N A293133 Square array A(n,k), n >= 0, k >= 0, read by antidiagonals, where column k is the expansion of e.g.f. exp(x^(k+1)/(1+x)).
%H A293133 Seiichi Manyama, <a href="/A293133/b293133.txt">Antidiagonals n = 0..139, flattened</a>
%F A293133 A(0,k) = 1, A(1,k) = A(2,k) = ... = A(k,k) = 0 and A(n,k) = (-1)^k * Sum_{i=k..n-1} (-1)^i*(i+1)!*binomial(n-1,i)*A(n-1-i,k) for n > k.
%e A293133 Square array begins:
%e A293133      1,    1,   1,    1, ...
%e A293133      1,    0,   0,    0, ...
%e A293133     -1,    2,   0,    0, ...
%e A293133      1,   -6,   6,    0, ...
%e A293133      1,   36, -24,   24, ...
%e A293133    -19, -240, 120, -120, ...
%o A293133 (Ruby)
%o A293133 def f(n)
%o A293133   return 1 if n < 2
%o A293133   (1..n).inject(:*)
%o A293133 end
%o A293133 def ncr(n, r)
%o A293133   return 1 if r == 0
%o A293133   (n - r + 1..n).inject(:*) / (1..r).inject(:*)
%o A293133 end
%o A293133 def A(k, n)
%o A293133   ary = [1]
%o A293133   (1..n).each{|i| ary << (-1) ** (k % 2) * (k..i - 1).inject(0){|s, j| s + (-1) ** (j % 2) * f(j + 1) * ncr(i - 1, j) * ary[i - 1 - j]}}
%o A293133   ary
%o A293133 end
%o A293133 def A293133(n)
%o A293133   a = []
%o A293133   (0..n).each{|i| a << A(i, n - i)}
%o A293133   ary = []
%o A293133   (0..n).each{|i|
%o A293133     (0..i).each{|j|
%o A293133       ary << a[i - j][j]
%o A293133     }
%o A293133   }
%o A293133   ary
%o A293133 end
%o A293133 p A293133(20)
%Y A293133 Columns k=0..2 give A111884, A293120, A293121.
%Y A293133 Rows n=0..1 give A000012, A000007.
%Y A293133 Main diagonal gives A000007.
%Y A293133 A(n,n-1) gives A000142(n).
%Y A293133 Cf. A293053, A293119, A293134,
%K A293133 sign,tabl
%O A293133 0,9
%A A293133 _Seiichi Manyama_, Sep 30 2017
