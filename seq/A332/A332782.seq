%I A332782 #29 Apr 10 2020 15:12:36
%S A332782 0,0,0,0,0,1,2,3,4,5,5,8,12,9,13,9,2,15,7,11,3,2,14,10,2,2,1,16,27,26,
%T A332782 25,25,10,18,9,17,9,4,23,31,15,7,4,20,12,4,4,1,22,27,32,37,37,52,48,
%U A332782 17,53,17,38,23,7,51,35,6,18,22,38,6,1,20,3,38,33,33,54,54,17,49
%N A332782 a(n) = (a(n-1) XOR a(n-5)) + 1, a(0) = a(1) = a(2) = a(3) = a(4) = 0.
%H A332782 Alois P. Heinz, <a href="/A332782/b332782.txt">Table of n, a(n) for n = 0..65536</a>.
%H A332782 G. Marsaglia, <a href="http://dx.doi.org/10.18637/jss.v008.i14">Xorshift RNGs</a>, Journal of Statistical Software, Vol. 8, Issue 14, Jul 2003.
%H A332782 Wikipedia, <a href="https://en.wikipedia.org/wiki/Bitwise_operation#XOR">Bitwise operation (XOR)</a>.
%H A332782 Wikipedia, <a href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register">Linear-feedback shift register</a>.
%H A332782 Wikipedia, <a href="https://en.wikipedia.org/wiki/Xorshift">Xorshift</a>.
%e A332782 a(5) = (a(4) XOR a(0)) + 1 = (0 XOR 0) + 1 = 0 + 1 = 1.
%e A332782 a(6) = (a(5) XOR a(1)) + 1 = (1 XOR 0) + 1 = 1 + 1 = 2.
%e A332782 a(10) = (a(9) XOR a(5)) + 1 = (101_2 XOR 001_2) + 1 = 100_2 + 1 = 101_2 = 5_10.
%p A332782 a:= proc(n) option remember; `if`(n<5, 0,
%p A332782        Bits[Xor](a(n-1), a(n-5))+1)
%p A332782     end:
%p A332782 seq(a(n), n=0..80);  # _Alois P. Heinz_, Mar 09 2020
%t A332782 Nest[Append[#, 1 + BitXor @@ #[[{-1, -5}]] ] &, ConstantArray[0, 5], 75] (* _Michael De Vlieger_, Feb 23 2020 *)
%o A332782 (Python)
%o A332782 feedback_delay = 4
%o A332782 a = [0 for i in range(feedback_delay+1)]
%o A332782 for i in range(feedback_delay,100):
%o A332782     a.append((a[i]^a[i-feedback_delay])+1)
%Y A332782 Cf. A114375 (shift 1), A332780 (shift 2), A332781 (shift 3).
%K A332782 nonn,base
%O A332782 0,7
%A A332782 _Rok Cestnik_, Feb 23 2020
