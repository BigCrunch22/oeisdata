%I A304178 #125 Dec 06 2020 01:36:24
%S A304178 1,1,2,2,4,4,7,7,11,12,18,17,25,27,38,38,50,51,70,69,92,95,122,118,
%T A304178 151,156,197,195,244,242,305,297,369,376,456,441,536,541,658,643,767,
%U A304178 761,920,895,1074,1079,1271,1227,1444,1436,1696,1665,1948,1923,2258,2190
%N A304178 Number of distinct sets of palindrome prefix lengths, over all binary palindromes of length n.
%H A304178 Michael S. Branicky, <a href="/A304178/b304178.txt">Table of n, a(n) for n = 1..64</a>
%e A304178 For n = 7, the possible sets are
%e A304178 {1,2,3,4,5,6,7} for the string 0000000,
%e A304178 {1,3,5,7} for the string 0101010,
%e A304178 {1,2,3,7} for the string 0001000,
%e A304178 {1,2,7} for the string 0010100,
%e A304178 {1,3,7} for the string 0100010,
%e A304178 {1,4,7} for the string 0110110,
%e A304178 {1,7} for the string 0111110.
%o A304178 (Python)
%o A304178 from itertools import product
%o A304178 def pals(n):
%o A304178     for p in product("01", repeat=n//2):
%o A304178         left = "".join(p)
%o A304178         right = left[::-1]
%o A304178         if n%2==0: yield left+right
%o A304178         else:
%o A304178             yield left+"0"+right
%o A304178             yield left+"1"+right
%o A304178 def pal_prefix_lengths(s): # skip length 1 since it is in all sets
%o A304178     return [i for i in range(2, len(s)+1) if s[:i]==(s[:i])[::-1]]
%o A304178 def a(n):
%o A304178     sets = set()
%o A304178     for p in pals(n):
%o A304178         if p[0]=="1": break # skip by symmetry
%o A304178         sets.add(tuple(pal_prefix_lengths(p)))
%o A304178     return len(sets)
%o A304178 print([a(n) for n in range(1,41)]) # _Michael S. Branicky_, Dec 05 2020
%K A304178 nonn
%O A304178 1,3
%A A304178 _Jeffrey Shallit_, Jan 28 2019
%E A304178 a(41) and beyond from _Michael S. Branicky_, Dec 05 2020
