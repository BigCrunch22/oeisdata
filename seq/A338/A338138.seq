%I A338138 #11 Oct 24 2020 17:28:38
%S A338138 1,2,2,3,2,4,2,5,2,6,2,7,3,3,4,3,5,3,6,3,7,4,4,5,4,6,4,7,5,5,6,5,7,6,
%T A338138 6,7,7,8,3,8,4,8,5,8,6,8,7,9,3,9,4,9,5,9,6,9,7,10,3,10,4,10,5,10,6,10,
%U A338138 7,11,3,11,4,11
%N A338138 Nested cube root (b(n) + (b(n-1) + ... + (b(1))^(1/3)...)^(1/3))^(1/3), where b(n) = A338137(n).
%C A338138 Contains every positive integer: letting s_n = (b(n) + (b(n-1) + ... + (b(1))^(1/3)...)^(1/3))^(1/3), we have b_n = s_n^3-s_{n-1}. We claim that if s_1,...s_{n-1} <= k, then s_n <=k+1. Indeed, the given condition implies b_1,...,b_{n-1} <= k^3. Since (k+1)^3-s_{n-1} >= k^3+3k^2+2k+1 > b_j for j < n and b_n is the smallest positive integer not already in the sequence for which b_n+s_{n-1} is a cube, then s_n <= k+1. Then we note that b_n = s_n^3-s_{n-1} cannot repeat, so that s_n cannot be a single constant infinitely often, so {s_n} contains every positive integer.
%F A338138 a(n) = (a(n-1) + A338137(n))^(1/3). - _Andrew Howroyd_, Oct 15 2020
%o A338138 (Python)
%o A338138 myList = [1]
%o A338138 roots = [1]
%o A338138 s = 1
%o A338138 t = 0
%o A338138 for n in range(9999):
%o A338138     b = 2
%o A338138     while t == 0:
%o A338138         if(b**3-s > 0 and not b**3-s in myList):
%o A338138             myList.append(b**3-s)
%o A338138             s = b
%o A338138             roots.append(s)
%o A338138             t = 1
%o A338138         else:
%o A338138             b += 1
%o A338138     t=0
%o A338138 print("roots: ",roots)
%Y A338138 Cf. A338137
%K A338138 nonn
%O A338138 1,2
%A A338138 _Vincent Chan_, Oct 12 2020
